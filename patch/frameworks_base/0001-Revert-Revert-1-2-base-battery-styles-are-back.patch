From de9269b47775ec01508e8fb5818f13a73d3807c0 Mon Sep 17 00:00:00 2001
From: sub77 <sub77@ymail.com>
Date: Mon, 28 Nov 2016 20:51:07 +0000
Subject: [PATCH] Revert "Revert "[1/2] base: battery styles are back""

This reverts commit a73a3c55ae20c1a7b951d614f874c16a6ebdcde3.
---
 core/java/android/provider/Settings.java           |  42 ++-
 core/res/res/values/custom_arrays.xml              |  18 ++
 core/res/res/values/custom_strings.xml             |   7 +
 .../res/drawable-hdpi/statusbar_battery_kronic.png | Bin 0 -> 2360 bytes
 .../drawable-xhdpi/statusbar_battery_kronic.png    | Bin 0 -> 2360 bytes
 .../drawable-xxhdpi/statusbar_battery_kronic.png   | Bin 0 -> 3554 bytes
 .../drawable-xxxhdpi/statusbar_battery_kronic.png  | Bin 0 -> 2654 bytes
 .../res/layout/battery_circle_percent_view.xml     |  22 ++
 .../SystemUI/res/layout/battery_droid_view.xml     |  22 ++
 .../SystemUI/res/layout/battery_hidden_view.xml    |  21 ++
 .../res/layout/battery_meter_horizontal_view.xml   |  21 ++
 .../res/layout/battery_meter_percent_view.xml      |  22 ++
 .../SystemUI/res/layout/battery_percent_view.xml   |  22 ++
 .../SystemUI/res/layout/keyguard_status_bar.xml    |  10 -
 .../res/layout/status_bar_expanded_header.xml      |   9 -
 packages/SystemUI/res/layout/system_icons.xml      |  11 +-
 packages/SystemUI/res/values/custom_dimens.xml     |   5 +-
 packages/SystemUI/res/values/dimens.xml            |   4 +-
 .../src/com/android/systemui/BatteryMeterView.java |  16 +-
 .../android/systemui/omni/AbstractBatteryView.java | 326 +++++++++++++++++++++
 .../systemui/omni/BatteryCirclePercentView.java    | 236 +++++++++++++++
 .../android/systemui/omni/BatteryDroidView.java    | 195 ++++++++++++
 .../systemui/omni/BatteryMeterHorizontalView.java  | 302 +++++++++++++++++++
 .../systemui/omni/BatteryMeterPercentView.java     | 310 ++++++++++++++++++++
 .../android/systemui/omni/BatteryPercentView.java  | 116 ++++++++
 .../android/systemui/omni/BatteryViewManager.java  | 212 ++++++++++++++
 .../systemui/statusbar/car/CarStatusBar.java       |   4 +
 .../systemui/statusbar/phone/BarTransitions.java   |   4 +
 .../statusbar/phone/KeyguardStatusBarView.java     |  28 +-
 .../systemui/statusbar/phone/PhoneStatusBar.java   |  21 +-
 .../statusbar/phone/PhoneStatusBarTransitions.java |   9 +-
 .../statusbar/phone/StatusBarHeaderView.java       |  32 +-
 .../statusbar/phone/StatusBarIconController.java   |  28 +-
 33 files changed, 1998 insertions(+), 77 deletions(-)
 create mode 100644 packages/SystemUI/res/drawable-hdpi/statusbar_battery_kronic.png
 create mode 100644 packages/SystemUI/res/drawable-xhdpi/statusbar_battery_kronic.png
 create mode 100644 packages/SystemUI/res/drawable-xxhdpi/statusbar_battery_kronic.png
 create mode 100644 packages/SystemUI/res/drawable-xxxhdpi/statusbar_battery_kronic.png
 create mode 100644 packages/SystemUI/res/layout/battery_circle_percent_view.xml
 create mode 100644 packages/SystemUI/res/layout/battery_droid_view.xml
 create mode 100644 packages/SystemUI/res/layout/battery_hidden_view.xml
 create mode 100644 packages/SystemUI/res/layout/battery_meter_horizontal_view.xml
 create mode 100644 packages/SystemUI/res/layout/battery_meter_percent_view.xml
 create mode 100644 packages/SystemUI/res/layout/battery_percent_view.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/omni/AbstractBatteryView.java
 create mode 100755 packages/SystemUI/src/com/android/systemui/omni/BatteryCirclePercentView.java
 create mode 100755 packages/SystemUI/src/com/android/systemui/omni/BatteryDroidView.java
 create mode 100755 packages/SystemUI/src/com/android/systemui/omni/BatteryMeterHorizontalView.java
 create mode 100755 packages/SystemUI/src/com/android/systemui/omni/BatteryMeterPercentView.java
 create mode 100755 packages/SystemUI/src/com/android/systemui/omni/BatteryPercentView.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/omni/BatteryViewManager.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 8cece69..620ce44 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4387,7 +4387,41 @@ public final class Settings {
          */
         public static final String DIALER_OPENCNAM_AUTH_TOKEN = "dialer_opencnam_auth_token";
 
-         /**
+        /**
+         * Int value of the battery style 0 is default
+         * 0 - Portrait
+         * 1 - Landscape
+         * 2 - Circle
+         * 3 - Text
+         * 4 - Droid
+         * 5 - Hidden
+         * @hide
+         */
+        public static final String STATUSBAR_BATTERY_STYLE = "statusbar_battery_style";
+
+        /**
+         * int value if the battery percent 0 is default
+         * 0 - Never
+         * 1 - Always
+         * @hide
+         */
+        public static final String STATUSBAR_BATTERY_PERCENT = "statusbar_battery_percent";
+
+        /**
+         * boolean value if the battery percent should be shown inside the image
+         *
+         * @hide
+         */
+        public static final String STATUSBAR_BATTERY_PERCENT_INSIDE = "statusbar_battery_percent_inside";
+
+        /**
+         * boolean value if the charging flash should be displayed
+         *
+         * @hide
+         */
+        public static final String STATUSBAR_BATTERY_CHARGING_IMAGE = "statusbar_battery_charging_image";
+
+        /**
          * Quick Settings nougat animation
          * @hide
          */
@@ -4528,7 +4562,11 @@ public final class Settings {
             NOTIFICATION_SOUND,
             ACCELEROMETER_ROTATION,
             NOTIFICATION_LIGHT_SCREEN_ON,
-            ALLOW_LIGHTS
+            ALLOW_LIGHTS,
+            STATUSBAR_BATTERY_STYLE,
+            STATUSBAR_BATTERY_PERCENT,
+            STATUSBAR_BATTERY_PERCENT_INSIDE,
+            STATUSBAR_BATTERY_CHARGING_IMAGE
         };
 
         /**
diff --git a/core/res/res/values/custom_arrays.xml b/core/res/res/values/custom_arrays.xml
index 7d1e992..19e4688 100644
--- a/core/res/res/values/custom_arrays.xml
+++ b/core/res/res/values/custom_arrays.xml
@@ -41,4 +41,22 @@
         <item>com.google.android.gsf|com.google.android.talk</item>
     </string-array>
 
+    <string-array name="entries_battery_styles" translatable="false">
+        <item>@string/battery_style_portrait</item>
+        <item>@string/battery_style_landscape</item>
+        <item>@string/battery_style_circle</item>
+        <item>@string/battery_style_text</item>
+        <item>@string/battery_style_droid</item>
+        <item>@string/battery_style_hidden</item>
+    </string-array>
+
+    <string-array name="values_battery_styles" translatable="false">
+        <item>0</item>
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+        <item>4</item>
+        <item>5</item>
+    </string-array>
+
 </resources>
diff --git a/core/res/res/values/custom_strings.xml b/core/res/res/values/custom_strings.xml
index ed04d2c..e38dddc 100644
--- a/core/res/res/values/custom_strings.xml
+++ b/core/res/res/values/custom_strings.xml
@@ -65,4 +65,11 @@
 
     <string name="default_string">Default</string>
 
+    <string name="battery_style_portrait">Portrait</string>
+    <string name="battery_style_landscape">Landscape</string>
+    <string name="battery_style_circle">Circle</string>
+    <string name="battery_style_text">Text only</string>
+    <string name="battery_style_droid">Kronic</string>
+    <string name="battery_style_hidden">Hide</string>
+
 </resources>
diff --git a/packages/SystemUI/res/drawable-hdpi/statusbar_battery_kronic.png b/packages/SystemUI/res/drawable-hdpi/statusbar_battery_kronic.png
new file mode 100644
index 0000000000000000000000000000000000000000..2ca7022c7754c4456e2cd47ef23288b3d07b04be
GIT binary patch
literal 2360
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xhdpi/statusbar_battery_kronic.png b/packages/SystemUI/res/drawable-xhdpi/statusbar_battery_kronic.png
new file mode 100644
index 0000000000000000000000000000000000000000..6f217d2a1d72622671066460f72c42fbf79c3e35
GIT binary patch
literal 2360
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxhdpi/statusbar_battery_kronic.png b/packages/SystemUI/res/drawable-xxhdpi/statusbar_battery_kronic.png
new file mode 100644
index 0000000000000000000000000000000000000000..4a3b2860df90735b192e91bb15ede50d0f4ab9bf
GIT binary patch
literal 3554
zcmWkx2{csi8@^)?St`5iTM1)g29b5_J0WS1u_Rf>T4NbxDals&WlOdu#=e!EQno>a
zvWJl+yRnSrfB)Y(-+j;d-g~}t?)yH^`#kr#xvAboMqWk$04^Hn>sW$O_5YiJ4t%Pd
z{K9~N?tzh>4j938q}>z&h6}#>cl`l?>GJ<K1bCax4Ia`57?>dG=NK8OVH{yWdSc*>
zJ_b6P)*ds{_F?9ufeq&;c0#E1CAD|v`L49cCw*IxegQ*wAtt?=V!b{uUC-5zZ%jBN
z7L5|&4b3y%5)}yJ97#ca@k0G<^U=lL_>?Fqw%#rw_U}}(O_hDsec>B||9sqM+mS=n
zH~qQE6bx~5H%x6gGzr%ui2$f@6bKs7r-d@%_%&z%{3ldl7N7z+P@B`wsp9-e7zpk{
zgcgQ+j@n5DX9BE3e4`v_ovz|MfZU+yy|@$_4JfVzVr@*N@9sroPBXU&pd-Y#oB$(;
zL!-7v&bB;|lodIvxI>jpH%Dn=7|lJW*Z4D?`40;40Ul=>l_HMRTTw@B&7xOW=Z5lt
z4{8z2LYV3fBE9*kB#ktN9mkVK8zhYDi+E5el1G;ewWv&jG-6nB97pHCmucAv8bI-Y
z%`PR0n&GP41OqTT6Yca6jyzWusJsopX9}E<0>D;oDej!b>8}92G0>KolOewn4!ECD
zIT0$Pdpw+`A<cVSR7QXyAeTg^bfvxR`~mJ^{Sh_c)NXhH+q;gnmy(rbk+v=WGK#nI
zlN(yji+D9R=S2CV04S4VEP=W)(aUUX?I$OpsMgT`dU|?H^#;4T7Rrg~Sy_DIm!6NP
zn3<W8$>g0ZpVs__hK8_Hbx25p6D{CR;A4ntpPF(=MVpziX2{$lSsP$5u&&O|4c<At
zRSE3&?U{%7-P|OwSgb+n+8Cjx!Us+nPCrZ==r%Pq?T)?37k;o49nCH%xEXMvuC8uA
z5ix^nYNA|qEN^XX)i*Ig>gYThIbL7)Iy^q60_uHcSz@%D?-PJzk+VitjS?kZ@U^M>
z$9x2QS=r0s;bBv~`i~!9n5pewq1Ak+m7lqHcmLqP-Q1ilL(Y-df<1sqNqv9Vl)xqT
zJ9IZiRBwIqN@m6V{`zu#W8*?geC<k^CB89W#j@muO}T@?8^f=6N^Q2+D%wcd%KqGJ
zY*6QSmiX5^JUl0V3z8aL`#8sb{`Bihmoc3rEiNjB-ZYSqkg#uP@|yV^qJ5)zvz5{q
z^v_<UV7e)IWOjB|^S``2LFwz)^;3BhW7|&2eCm|-o3i$`@%j1ra9|Om>^_(~P*^A?
zAucX2EF38>FaNp+ogNe!8QD)Hl3rcC6|%p2C$-R?KmtpvdtVcYMDp|S_#Kkeuw=W2
zn?OkSeVvN{>_28R_0!rBwQ8?luq#|#1<lP<#o1!Kyu8Wj>2!E&M!fY4#YbavOBs&3
z78dNL*-8)}A0IJENl_IQUI+w|tS`n!1JNyD_pIY35C|VCD!wK1A(G#`i77J55P=S1
z0z139s0RiHxcT`50>-#xb)G&|nVOp7U(F5OF~D}MYTA8EE_na`!?1@EF9#<lOib*H
z^D`z!MkNJ>#o8oPMM;O#JL!O3l1a&uXWiRdLF>MD&L|X06|?yL!%l2moHCZ|Me${$
z`x;ePSSYXl9SxI5AjaoqUnV9N85aG?d0%Q<ff*~i%R=4aJ*`4MI7qq>a<sEF7Dnzk
z-U$2iT+$og+|rVR$KzRgZ7Wb=dhMPHyxzZSdo*WVlGM73i;LwcEUc`%goc^w4ciU3
zHbEa`N=nK^-6O7IlPou@@IPNJ?2*Z)$EUZTP~1&-;)%ELg|@hS_x{Ytfh>e598OL@
zHIc|Fxu#sECnGG}v6P~YCEw`k>bihqjOoO%!W9(k($979rKJh>g!G?3e>zk;K_KR`
z8M}Xn3uO1l*Y-otj+P1Tc0SZ0ziS_I?)GyWuax9{Fqg8sch4xbe{gX5^))LydwUh<
zN-jCn;@-;05qZ)lO$@|NW61V{@Pp}K**<Oo0TP%YK-RnfdOEu5%E}?vNQt!PhDE91
z^YrwTGg?$cB&sQRv-NT1Y{YrX5=+vH7k`d+mkm<EtZd$)*sqBRkG6yJ$2D<2GtJNC
z+D?8for*J1X=!N*F;MmP_JUvsfR>h)4+KKskway1N(#FI9Il18rUE`UHCfo(dsbcU
zc4_dLtRHCoz)r$tBqH}Z=mlS5ZQ$Nh9x3bs0z{(>*{Zs_H(2tz-`(!BQ_8O&KRP=)
zG>;Dt?HoEeq-|bOuq*<qfBUab(qq-_9Dd&l-r&!O`Zw8d@0gyJc6%saTdXHC5)yv0
z{VjAkCzzj^DXmAR1vSX3ev<rXynJbE3#zB9J25(nUhr=_UM*cXPWNd$P2bqqAOh!-
zK&a~`Iw5HPcz;a>yJur<W#uBOs;ZjJhwxtfc&GG6uZxSzll2LCqddXz!$?0rzx3O3
zEqj+5yr+AwSryy$Mny+|@|kVDw~F9R<mcx0ZLC46x}m6d1^Y0>{{BLc&a|3BK=;?L
zRqx*6a&mG;J?mVq4-kn0Bh;5@I!I8;-iX;_etLIRu)Y=pHmP8KePv~SzAH{9T9SbZ
zY=g2t$+&k3V=)HBiNiOXjg6U2BrYc;Bz!{mTmsKyV`G2x^(CyVtW1IM%*x8bkE~=9
zk1N{FdcS<pDe3F^_ATzolPA`tKjC2@CAz?=9!I|P{Mof@*UHMvgBSxmJmO_!WI#x{
zgDedT3*+JCHT>j2L?&=<w?|Sda5HDCN3=@Su(XRtDdP^Laa-TN>s#B{h+MzU2!QQ3
zx3!IX^@?S0Z%?COSO^MbW8%D_VQl=;iWP~selSvOq68v8K;<gPe>P6eST4s<c2H)X
zm6Vhuax9Wav7n^zEBOM`)6?8MJdqU@a+a2s$r%}OnVH<lwRU$!6cLDp#h$dkYirTg
z*OB0u76_Sxh>3{_iHXqw@5a~IIXGg<%Vhy2V9rFozs71xPF!3(?E!VE_4Tup-9gU2
z1hLYOAMI>y-H*anN3WqiVZQD(<>yB#Dk?VnEp!)#cI~f?6Kn_WjcGQwJ*WQ(3YhW=
z3(gY12=;(SP;d}TTa}EYh~+&Y@wlPUm6esrU?0=UgEwbdL?$G53vN#l#tvv(P<fVj
z?_MC-FbN9gO~MZ;6pDqlHBE4Ea6oWyL2)tN($bPS-g;|$y92zD9V`Wj<Tg4!UQl1p
z`RmuO%$x2kot>R?^Yf8<f?)xj+gqR%y*Rgl9QNFv^;8CW(bayl9b*bGSZ8&0wfw@E
zW9T+5$k{N%BFmC0Z*_I`@SPsX%WtQ5b}(zp=@Bo}^R48bn!MMBqJFFdOf^5*&9pV~
z@+uqo{#;QG)qGgr5fl^z6BgEdeFtWb%AjfA{i8-cTu9peQDn4W16NY|Zi{;2s>N=k
z$)@B^%$}s092@H{E4yJ~lfg5RIapNm{>S1Xn)Aw)mqzpL?SQ|(za;bFe4L;FVxlXK
zbvH#%pep^&U&Ec>1;FT7P@t(Pi;<zB15CcoUIyVc0i8z_#xQYxX5O2qa_R5ssfr+f
z@+8Xmhg_~N@h82GJLkOL{o{uvD5-SL&d!;)f@Mj>oCFXOU|C&ONAd7MK>-1QOpqF1
zEd8gavTtuny)mq<tpy?YuC9(_nV6#;7^wL9^XH-QarbHKi%xOM)IH*#XV(qog@oGi
zEw@~{nK!0BrA0?avxuS`9o6%B$a{NeKfkKzsk5_i((>|T97@JC_E(WYy!TwlLpt0D
z=p1gy$hhk1(VOL}_JCD}BM|<+zP_V>yFl?%0_i(R$A9S(?4wt~uzrr|H^=a!7)jG?
zCnS<~^7n5$E32-dA@ek4O%qI0sq{sS=~Qu}iJ6&=om?0<^T}#yg*T<Wx37<H+}Txu
zS2^M=G);)14mgn%<*PW`A9r*&GfV0d9G;mWf?qlL_C7Xg)h3qsf<xLEoMVANl!UbE
z2?AI~h0N2|*VZ=jN2xvC`|!0QC@|<?b9NI0RMpg^4XPbvTd+MFN&8PhcE*JjB4r_U
z<+!s`D<~kqykL092|9#^4WnUq$r(!8pzLn89OU-l^1{e>nYa^mwFx#x1;ZXGK2UBY
zD71ZJ!&^W#B)O`piWhKv<vz%`;Gws>a3lfrE&TaY?CR<&EHBRvnikM140$McJbI+9
zp#j)bpe_Q9;ioDn>_5fVZ{8&0g|1z@pni5JiiYv%>gt+XT1FKYOGsT|1Qk8gSOT0W
zb08d*p6*G#efzeY>QD|i$09DdRrjxGoRVt_&856T9a5Wp=c%kLEp>B##R)u(PfSdN
zhpDKjl>Kvlv_Z2a2i)|_=%H_q0HnBNYDPy#Ewo`Jra73m$(OEP9q8>fED0;W-_-r`
zC3Dqd1Wpvlr4)=5hyaVX59gx4eoGP@pXqh22`7WbVrhHf+c(v0&qt5yK>HilZ;G2m
zU)8@{d`da!J3To;y)i6$C@d`eB0fHTE<T=teq<k%-VjiSg;Vq^1J`WOZf+{yS65c#
z0|Ep0!F7LRCBR)oRFt*<tzxM&%xun}2sCMhPq5gMqr<~5pdHo&$94=Yxb%?7n8Tx^
zPkHJQxuACgMJQ_60}TpOhCQJbKfZP=E;jb}-qTYKIk}3D>+9>DyLIq~d*@Pv)9toQ
SN^0QW7+`=j)hX9<iuxau*W?NS

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-xxxhdpi/statusbar_battery_kronic.png b/packages/SystemUI/res/drawable-xxxhdpi/statusbar_battery_kronic.png
new file mode 100644
index 0000000000000000000000000000000000000000..49fcb683dc34df47ac75cf26b404143e84e0da73
GIT binary patch
literal 2654
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
M07*qoM6N<$g3+ebx&QzG

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/layout/battery_circle_percent_view.xml b/packages/SystemUI/res/layout/battery_circle_percent_view.xml
new file mode 100644
index 0000000..d415262
--- /dev/null
+++ b/packages/SystemUI/res/layout/battery_circle_percent_view.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+  -->
+<com.android.systemui.omni.BatteryCirclePercentView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/battery"
+    android:layout_height="wrap_content"
+    android:layout_width="wrap_content"
+    android:layout_marginBottom="@dimen/battery_margin_bottom" />
+
diff --git a/packages/SystemUI/res/layout/battery_droid_view.xml b/packages/SystemUI/res/layout/battery_droid_view.xml
new file mode 100644
index 0000000..9593729
--- /dev/null
+++ b/packages/SystemUI/res/layout/battery_droid_view.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+  -->
+<com.android.systemui.omni.BatteryDroidView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/battery"
+    android:layout_height="wrap_content"
+    android:layout_width="wrap_content"
+    android:layout_marginBottom="@dimen/battery_margin_bottom" />
+
diff --git a/packages/SystemUI/res/layout/battery_hidden_view.xml b/packages/SystemUI/res/layout/battery_hidden_view.xml
new file mode 100644
index 0000000..04fd01e
--- /dev/null
+++ b/packages/SystemUI/res/layout/battery_hidden_view.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+  -->
+<com.android.systemui.omni.BatteryMeterPercentView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/battery"
+    android:layout_height="wrap_content"
+    android:layout_width="wrap_content"
+    android:visibility="gone" />
diff --git a/packages/SystemUI/res/layout/battery_meter_horizontal_view.xml b/packages/SystemUI/res/layout/battery_meter_horizontal_view.xml
new file mode 100644
index 0000000..11320af
--- /dev/null
+++ b/packages/SystemUI/res/layout/battery_meter_horizontal_view.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+  -->
+<com.android.systemui.omni.BatteryMeterHorizontalView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/battery"
+    android:layout_height="14.5dp"
+    android:layout_width="wrap_content" />
+
diff --git a/packages/SystemUI/res/layout/battery_meter_percent_view.xml b/packages/SystemUI/res/layout/battery_meter_percent_view.xml
new file mode 100644
index 0000000..7878f81
--- /dev/null
+++ b/packages/SystemUI/res/layout/battery_meter_percent_view.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+  -->
+<com.android.systemui.omni.BatteryMeterPercentView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/battery"
+    android:layout_height="15dp"
+    android:layout_width="wrap_content"
+    android:layout_marginBottom="@dimen/battery_margin_bottom"/>
+
diff --git a/packages/SystemUI/res/layout/battery_percent_view.xml b/packages/SystemUI/res/layout/battery_percent_view.xml
new file mode 100644
index 0000000..a9376e9
--- /dev/null
+++ b/packages/SystemUI/res/layout/battery_percent_view.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2014 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License
+  -->
+<com.android.systemui.omni.BatteryPercentView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/battery"
+    android:layout_height="14.5dp"
+    android:layout_width="wrap_content"
+    android:layout_marginBottom="@dimen/battery_margin_bottom"/>
+
diff --git a/packages/SystemUI/res/layout/keyguard_status_bar.xml b/packages/SystemUI/res/layout/keyguard_status_bar.xml
index b6a75e3..b831c4a 100644
--- a/packages/SystemUI/res/layout/keyguard_status_bar.xml
+++ b/packages/SystemUI/res/layout/keyguard_status_bar.xml
@@ -62,16 +62,6 @@
             >
             <include layout="@layout/system_icons" />
         </FrameLayout>
-        <TextView android:id="@+id/battery_level"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_vertical"
-            android:layout_marginStart="@dimen/header_battery_margin_keyguard"
-            android:paddingEnd="@dimen/battery_level_padding_end"
-            android:textColor="#ffffff"
-            android:visibility="gone"
-            android:textSize="@dimen/battery_level_text_size"
-            android:importantForAccessibility="noHideDescendants"/>
     </LinearLayout>
 
     <LinearLayout
diff --git a/packages/SystemUI/res/layout/status_bar_expanded_header.xml b/packages/SystemUI/res/layout/status_bar_expanded_header.xml
index 110039c..f2cc948 100644
--- a/packages/SystemUI/res/layout/status_bar_expanded_header.xml
+++ b/packages/SystemUI/res/layout/status_bar_expanded_header.xml
@@ -66,15 +66,6 @@
             >
             <include layout="@layout/system_icons" />
         </FrameLayout>
-        <TextView android:id="@+id/battery_level"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_vertical"
-            android:layout_marginStart="@dimen/header_battery_margin_expanded"
-            android:paddingEnd="@dimen/battery_level_padding_end"
-            android:textColor="#ffffff"
-            android:textSize="@dimen/battery_level_text_size"
-            android:importantForAccessibility="noHideDescendants"/>
     </LinearLayout>
 
     <TextView
diff --git a/packages/SystemUI/res/layout/system_icons.xml b/packages/SystemUI/res/layout/system_icons.xml
index 3a33992..2f3f701 100644
--- a/packages/SystemUI/res/layout/system_icons.xml
+++ b/packages/SystemUI/res/layout/system_icons.xml
@@ -35,5 +35,12 @@
     <com.android.systemui.BatteryMeterView android:id="@+id/battery"
         android:layout_height="@dimen/status_bar_battery_icon_height"
         android:layout_width="@dimen/status_bar_battery_icon_width"
-        android:layout_marginBottom="@dimen/battery_margin_bottom"/>
-</LinearLayout>
\ No newline at end of file
+        android:layout_marginBottom="@dimen/battery_margin_bottom"
+        android:visibility="gone" />
+
+    <LinearLayout
+        android:id="@+id/battery_container"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:gravity="center_vertical" />
+</LinearLayout>
diff --git a/packages/SystemUI/res/values/custom_dimens.xml b/packages/SystemUI/res/values/custom_dimens.xml
index bbeac8d..9d7bf31 100644
--- a/packages/SystemUI/res/values/custom_dimens.xml
+++ b/packages/SystemUI/res/values/custom_dimens.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
-     Copyright (C) 2016 Cosmic-OS
+     Copyright (C) 2016 AOSiP Rom
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -34,6 +34,9 @@
     <!-- Keyguard Items Padding -->
     <dimen name="keyguard_items_padding">3dp</dimen> 
 
+    <dimen name="omni_battery_level_text_size_small">12sp</dimen>
+    <dimen name="omni_battery_level_text_size">14sp</dimen>
+
     <!-- carrier label text height -->
     <dimen name="status_bar_carrier_height">14dp</dimen>
 
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index b8e6a0e..7b2297d 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -43,7 +43,7 @@
     <dimen name="status_bar_clock_size">14sp</dimen>
 
     <!-- The starting padding for the clock in the status bar. -->
-    <dimen name="status_bar_clock_starting_padding">7dp</dimen>
+    <dimen name="status_bar_clock_starting_padding">4dp</dimen>
 
     <!-- The end padding for the clock in the status bar. -->
     <dimen name="status_bar_clock_end_padding">0dp</dimen>
@@ -491,7 +491,7 @@
     <dimen name="signal_cluster_margin_start">2.5dp</dimen>
 
     <!-- Padding between signal cluster and battery icon -->
-    <dimen name="signal_cluster_battery_padding">7dp</dimen>
+    <dimen name="signal_cluster_battery_padding">4dp</dimen>
 
     <!-- Padding for signal cluster and battery icon when there are not icons in signal cluster -->
     <dimen name="no_signal_cluster_battery_padding">3dp</dimen>
diff --git a/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java b/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
index d8b95cc..d8bf284 100644
--- a/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
+++ b/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
@@ -73,17 +73,21 @@ public class BatteryMeterView extends ImageView implements
     @Override
     public void onAttachedToWindow() {
         super.onAttachedToWindow();
-        mBatteryController.addStateChangedCallback(this);
-        mDrawable.startListening();
-        TunerService.get(getContext()).addTunable(this, StatusBarIconController.ICON_BLACKLIST);
+        if (mBatteryController != null) {
+            mBatteryController.addStateChangedCallback(this);
+            mDrawable.startListening();
+            TunerService.get(getContext()).addTunable(this, StatusBarIconController.ICON_BLACKLIST);
+        }
     }
 
     @Override
     public void onDetachedFromWindow() {
         super.onDetachedFromWindow();
-        mBatteryController.removeStateChangedCallback(this);
-        mDrawable.stopListening();
-        TunerService.get(getContext()).removeTunable(this);
+        if (mBatteryController != null) {
+            mBatteryController.removeStateChangedCallback(this);
+            mDrawable.stopListening();
+            TunerService.get(getContext()).removeTunable(this);
+        }
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/omni/AbstractBatteryView.java b/packages/SystemUI/src/com/android/systemui/omni/AbstractBatteryView.java
new file mode 100644
index 0000000..e3a8531
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/AbstractBatteryView.java
@@ -0,0 +1,326 @@
+/*
+ *  Copyright (C) 2015 The OmniROM Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.animation.ArgbEvaluator;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+
+public abstract class AbstractBatteryView extends View implements BatteryController.BatteryStateChangeCallback {
+    public static final String TAG = AbstractBatteryView.class.getSimpleName();
+
+    protected BatteryController mBatteryController;
+    protected boolean mPowerSaveEnabled;
+    protected BatteryTracker mDemoTracker = new BatteryTracker();
+    protected BatteryTracker mTracker = new BatteryTracker();
+    private boolean mAttached;
+    protected boolean mShowPercent;
+    protected boolean mPercentInside;
+    protected final int[] mColors;
+    protected final int mCriticalLevel;
+    protected int mFrameColor;
+    private int mChargeColor;
+    protected final float[] mBoltPoints;
+    protected boolean mChargingImage;
+    protected int mDarkModeBackgroundColor;
+    protected int mDarkModeFillColor;
+    protected int mLightModeBackgroundColor;
+    protected int mLightModeFillColor;
+    protected int mIconTint = Color.WHITE;
+    protected float mOldDarkIntensity = 0f;
+    protected final Paint mBoltPaint, mTextPaint;
+    protected int mTextSize;
+    protected int mTextWidth;
+
+    protected class BatteryTracker extends BroadcastReceiver {
+        public static final int UNKNOWN_LEVEL = -1;
+
+        // current battery status
+        int level = UNKNOWN_LEVEL;
+        String percentStr;
+        int plugType;
+        boolean plugged;
+        int health;
+        int status;
+        String technology;
+        int voltage;
+        int temperature;
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            final String action = intent.getAction();
+            if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+                level = (int)(100f
+                        * intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0)
+                        / intent.getIntExtra(BatteryManager.EXTRA_SCALE, 100));
+
+                plugType = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0);
+                plugged = plugType != 0;
+                health = intent.getIntExtra(BatteryManager.EXTRA_HEALTH,
+                        BatteryManager.BATTERY_HEALTH_UNKNOWN);
+                status = intent.getIntExtra(BatteryManager.EXTRA_STATUS,
+                        BatteryManager.BATTERY_STATUS_UNKNOWN);
+                technology = intent.getStringExtra(BatteryManager.EXTRA_TECHNOLOGY);
+                voltage = intent.getIntExtra(BatteryManager.EXTRA_VOLTAGE, 0);
+                temperature = intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0);
+
+                setContentDescription(
+                        context.getString(R.string.accessibility_battery_level, level));
+                onBatteryLevelChanged(level, plugged, status == BatteryManager.BATTERY_STATUS_CHARGING);
+            }
+        }
+    }
+
+    @Override
+    public void onAttachedToWindow() {
+        super.onAttachedToWindow();
+
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+        final Intent sticky = getContext().registerReceiver(mTracker, filter);
+        if (sticky != null) {
+            // preload the battery level
+            mTracker.onReceive(getContext(), sticky);
+        }
+        if (mBatteryController != null && !mAttached) {
+            mBatteryController.addStateChangedCallback(this);
+            mAttached = true;
+        }
+    }
+
+    @Override
+    public void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+
+        getContext().unregisterReceiver(mTracker);
+        if (mAttached) {
+            mBatteryController.removeStateChangedCallback(this);
+            mAttached = false;
+        }
+    }
+
+    public AbstractBatteryView(Context context) {
+        this(context, null, 0);
+    }
+
+    public AbstractBatteryView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public AbstractBatteryView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        TypedArray atts = context.obtainStyledAttributes(attrs, R.styleable.BatteryMeterView,
+                defStyle, 0);
+        mFrameColor = atts.getColor(R.styleable.BatteryMeterView_frameColor,
+                getResources().getColor(R.color.batterymeter_frame_color));
+        TypedArray levels = getResources().obtainTypedArray(R.array.batterymeter_color_levels);
+        TypedArray colors = getResources().obtainTypedArray(R.array.batterymeter_color_values);
+
+        final int N = levels.length();
+        mColors = new int[2*N];
+        for (int i=0; i<N; i++) {
+            mColors[2*i] = levels.getInt(i, 0);
+            mColors[2*i+1] = colors.getColor(i, 0);
+        }
+        levels.recycle();
+        colors.recycle();
+        atts.recycle();
+
+        mCriticalLevel = getResources().getInteger(
+                com.android.internal.R.integer.config_criticalBatteryWarningLevel);
+        mChargeColor = getResources().getColor(R.color.batterymeter_charge_color);
+        mBoltPoints = loadBoltPoints();
+        mBoltPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mBoltPaint.setColor(getResources().getColor(R.color.batterymeter_bolt_color));
+
+        mDarkModeBackgroundColor =
+                context.getColor(R.color.dark_mode_icon_color_dual_tone_background);
+        mDarkModeFillColor = context.getColor(R.color.dark_mode_icon_color_dual_tone_fill);
+        mLightModeBackgroundColor =
+                context.getColor(R.color.light_mode_icon_color_dual_tone_background);
+        mLightModeFillColor = context.getColor(R.color.light_mode_icon_color_dual_tone_fill);
+
+        mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        Typeface font = Typeface.create("sans-serif-medium", Typeface.BOLD);
+        mTextPaint.setTypeface(font);
+        mTextPaint.setTextAlign(Paint.Align.CENTER);
+        mTextSize = getResources().getDimensionPixelSize(R.dimen.omni_battery_level_text_size);
+        mTextPaint.setTextSize(mTextSize);
+    }
+
+    public void setBatteryController(BatteryController batteryController) {
+        mBatteryController = batteryController;
+        mPowerSaveEnabled = mBatteryController.isPowerSave();
+        if (!mAttached) {
+            mBatteryController.addStateChangedCallback(this);
+            mAttached = true;
+        }
+    }
+
+    @Override
+    public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
+        // TODO: Use this callback instead of own broadcast receiver.
+        postInvalidate();
+    }
+
+    public void setShowPercent(boolean showPercent) {
+        mShowPercent = showPercent;
+    }
+
+    public void setPercentInside(boolean percentInside) {
+        mPercentInside = percentInside;
+    }
+
+    public void setChargingImage(boolean chargingImage) {
+        mChargingImage = chargingImage;
+    }
+
+    protected boolean isWideDisplay() {
+        return mShowPercent && !mPercentInside;
+    }
+
+    protected boolean showChargingImage() {
+        BatteryTracker tracker = mTracker;
+        return tracker.plugged && mChargingImage;
+    }
+
+    protected int getCurrentColor(int level) {
+        if (mTracker.plugged) {
+            return mChargeColor;
+        }
+        return getColorForLevel(level);
+    }
+
+    protected int getColorForLevel(int percent) {
+        // If we are in power save mode, always use the normal color.
+        if (mPowerSaveEnabled) {
+            return mColors[mColors.length-1];
+        }
+        int thresh, color = 0;
+        for (int i=0; i<mColors.length; i+=2) {
+            thresh = mColors[i];
+            color = mColors[i+1];
+            if (percent <= thresh) {
+
+                // Respect tinting for "normal" level
+                if (i == mColors.length-2) {
+                    return mIconTint;
+                } else {
+                    return color;
+                }
+            }
+        }
+        return color;
+    }
+
+    @Override
+    public void onPowerSaveChanged(boolean isPowerSave) {
+        mPowerSaveEnabled = mBatteryController.isPowerSave();
+        postInvalidate();
+    }
+
+    @Override
+    public boolean hasOverlappingRendering() {
+        return false;
+    }
+
+    protected float[] loadBoltPoints() {
+        final int[] pts = getResources().getIntArray(R.array.batterymeter_bolt_points);
+        int maxX = 0, maxY = 0;
+        for (int i = 0; i < pts.length; i += 2) {
+            maxX = Math.max(maxX, pts[i]);
+            maxY = Math.max(maxY, pts[i + 1]);
+        }
+        final float[] ptsF = new float[pts.length];
+        for (int i = 0; i < pts.length; i += 2) {
+            ptsF[i] = (float)pts[i] / maxX;
+            ptsF[i + 1] = (float)pts[i + 1] / maxY;
+        }
+        return ptsF;
+    }
+
+    protected abstract void applyStyle();
+
+    protected void setDarkIntensity(float darkIntensity) {
+        if (darkIntensity == mOldDarkIntensity) {
+            return;
+        }
+        int backgroundColor = getBackgroundColor(darkIntensity);
+        int fillColor = getFillColor(darkIntensity);
+        mIconTint = fillColor;
+        mFrameColor = backgroundColor;
+        mBoltPaint.setColor(fillColor);
+        mChargeColor = fillColor;
+        invalidate();
+        mOldDarkIntensity = darkIntensity;
+    }
+
+    protected int getBackgroundColor(float darkIntensity) {
+        return getColorForDarkIntensity(
+                darkIntensity, mLightModeBackgroundColor, mDarkModeBackgroundColor);
+    }
+
+    protected int getFillColor(float darkIntensity) {
+        return getColorForDarkIntensity(
+                darkIntensity, mLightModeFillColor, mDarkModeFillColor);
+    }
+
+    protected int getColorForDarkIntensity(float darkIntensity, int lightColor, int darkColor) {
+        return (int) ArgbEvaluator.getInstance().evaluate(darkIntensity, lightColor, darkColor);
+    }
+
+    public void setTextShadow(boolean enabled) {
+        if (enabled) {
+            mTextPaint.setShadowLayer(5, 0, 0, Color.BLACK);
+        } else {
+            mTextPaint.setShadowLayer(0, 0, 0, Color.BLACK);
+        }
+        invalidate();
+    }
+
+    protected void updateExtraPercentFontSize() {
+        final int level = mTracker.level;
+        mTextSize = getResources().getDimensionPixelSize(level == 100 ?
+                R.dimen.omni_battery_level_text_size_small : R.dimen.omni_battery_level_text_size);
+        mTextPaint.setTextSize(mTextSize);
+        Rect bounds = new Rect();
+        String text = level == 100 ? "100%" : ".00%";
+        mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+        mTextWidth = bounds.width();
+        requestLayout();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/omni/BatteryCirclePercentView.java b/packages/SystemUI/src/com/android/systemui/omni/BatteryCirclePercentView.java
new file mode 100755
index 0000000..b84b106
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/BatteryCirclePercentView.java
@@ -0,0 +1,236 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.util.Log;
+import android.util.DisplayMetrics;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+
+import java.text.NumberFormat;
+
+public class BatteryCirclePercentView extends AbstractBatteryView implements
+        BatteryController.BatteryStateChangeCallback {
+    public static final String TAG = BatteryCirclePercentView.class.getSimpleName();
+
+    private static final int FULL = 96;
+
+    private final Paint mFramePaint, mBatteryPaint;
+    private int mCircleWidth;
+    private int mHeight;
+    private int mWidth;
+    private int mStrokeWidth;
+    private int mPercentOffsetY;
+
+    private final Path mBoltPath = new Path();
+
+    private final RectF mFrame = new RectF();
+    private final RectF mButtonFrame = new RectF();
+    private final RectF mBoltFrame = new RectF();
+
+    private final Path mShapePath = new Path();
+    private final Path mClipPath = new Path();
+    private final Path mTextPath = new Path();
+
+    public BatteryCirclePercentView(Context context) {
+        this(context, null, 0);
+    }
+
+    public BatteryCirclePercentView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BatteryCirclePercentView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        mFramePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mFramePaint.setColor(mFrameColor);
+        mFramePaint.setDither(true);
+        mFramePaint.setAntiAlias(true);
+        mFramePaint.setStyle(Paint.Style.STROKE);
+        mFramePaint.setPathEffect(null);
+
+        mBatteryPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mBatteryPaint.setDither(true);
+        mBatteryPaint.setAntiAlias(true);
+        mBatteryPaint.setStyle(Paint.Style.STROKE);
+        mBatteryPaint.setPathEffect(null);
+
+        applyStyle();
+
+        DisplayMetrics metrics = getResources().getDisplayMetrics();
+        mCircleWidth = (int) (13 * metrics.density + 0.5f);
+        mStrokeWidth = (int) (2 * metrics.density + 0.5f);
+        mBatteryPaint.setStrokeWidth(mStrokeWidth);
+        mFramePaint.setStrokeWidth(mStrokeWidth);
+        mPercentOffsetY = (int) (0.5 * metrics.density + 0.5f);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        mWidth = (isWideDisplay() ? (mTextWidth + mStrokeWidth) : 0) + mCircleWidth
+                + 2 * mStrokeWidth;
+        mHeight = mCircleWidth + 2 * mStrokeWidth;
+        setMeasuredDimension(mWidth, mHeight);
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        final int level = mTracker.level;
+        if (level == BatteryTracker.UNKNOWN_LEVEL) return;
+
+        mFrame.set(mStrokeWidth, mStrokeWidth, mHeight - mStrokeWidth,
+                mHeight - mStrokeWidth);
+
+        mBatteryPaint.setColor(getCurrentColor(level));
+        mFramePaint.setColor(mFrameColor);
+
+        // pad circle percentage to 100% once it reaches 97%
+        // for one, the circle looks odd with a too small gap,
+        // for another, some phones never reach 100% due to hardware design
+        int padLevel = level;
+        if (padLevel >= 97) {
+            padLevel = 100;
+        } else if (padLevel <= 3) {
+            // pad nearly invisible below 3% - looks odd
+            padLevel = 3;
+        }
+
+        // draw thin gray ring first
+        c.drawArc(mFrame, 270, 360, false, mFramePaint);
+        // draw colored arc representing charge level
+        c.drawArc(mFrame, 270, 3.6f * padLevel, false, mBatteryPaint);
+
+        if (showChargingImage()) {
+            int boltColor = getCurrentColor(level);
+            mBoltPaint.setColor(boltColor);
+            // define the bolt shape
+            final float bl = mFrame.left + mFrame.width() / 3f;
+            final float bt = mFrame.top + mFrame.height() / 4f;
+            final float br = mFrame.right - mFrame.width() / 4f;
+            final float bb = mFrame.bottom - mFrame.height() / 6f;
+            if (mBoltFrame.left != bl || mBoltFrame.top != bt
+                        || mBoltFrame.right != br || mBoltFrame.bottom != bb) {
+                mBoltFrame.set(bl, bt, br, bb);
+                mBoltPath.reset();
+                mBoltPath.moveTo(
+                        mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),
+                        mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
+                for (int i = 2; i < mBoltPoints.length; i += 2) {
+                    mBoltPath.lineTo(
+                            mBoltFrame.left + mBoltPoints[i] * mBoltFrame.width(),
+                            mBoltFrame.top + mBoltPoints[i + 1] * mBoltFrame.height());
+                }
+                mBoltPath.lineTo(
+                        mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),
+                        mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
+            }
+            c.drawPath(mBoltPath, mBoltPaint);
+        }
+
+        if (mShowPercent) {
+            updatePercentFontSize();
+            mTextPaint.setColor(getCurrentColor(level));
+
+            float textHeight = 0f;
+            float textOffset = 0f;
+            RectF bounds = null;
+            String percentage = null;
+
+            if (mPercentInside) {
+                if (!showChargingImage()) {
+                    percentage = String.valueOf(level);
+                    textHeight = mTextPaint.descent() - mTextPaint.ascent();
+                    textOffset = (textHeight / 2) - mTextPaint.descent();
+                    bounds = new RectF(0, 0, mWidth, mHeight);
+                }
+            } else {
+                percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
+                textHeight = mTextPaint.descent() - mTextPaint.ascent();
+                textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+                bounds = new RectF(mCircleWidth + 3 * mStrokeWidth, mPercentOffsetY,
+                        mWidth, mHeight);
+            }
+            if (percentage != null) {
+                if (mPercentInside) {
+                    c.drawText(percentage, bounds.centerX(), bounds.centerY() + textOffset,
+                            mTextPaint);
+                } else {
+                    c.drawText(percentage, mWidth, bounds.centerY() + textOffset, mTextPaint);
+                }
+            }
+        }
+    }
+
+    @Override
+    protected void applyStyle() {
+        final int level = mTracker.level;
+        if (mPercentInside) {
+            Typeface font = Typeface.create("sans-serif-condensed", Typeface.BOLD);
+            mTextPaint.setTypeface(font);
+            mTextPaint.setTextAlign(Paint.Align.CENTER);
+            mTextSize = (int)(mCircleWidth * 0.6f);
+            mTextPaint.setTextSize(mTextSize);
+            Rect bounds = new Rect();
+            String text = "100";
+            mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+            mTextWidth = bounds.width();
+        } else {
+            Typeface font = Typeface.create("sans-serif-medium", Typeface.NORMAL);
+            mTextPaint.setTypeface(font);
+            mTextPaint.setTextAlign(Paint.Align.RIGHT);
+            mTextSize = getResources().getDimensionPixelSize(level == 100 ?
+                    R.dimen.omni_battery_level_text_size_small :
+                    R.dimen.omni_battery_level_text_size);
+            mTextPaint.setTextSize(mTextSize);
+            Rect bounds = new Rect();
+            String text = level == 100 ? "100%" : ".00%";
+            mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+            mTextWidth = bounds.width();
+        }
+    }
+
+    private void updatePercentFontSize() {
+        final int level = mTracker.level;
+        if (mPercentInside) {
+            mTextSize = (int)(mCircleWidth * (level == 100 ?  0.5f : 0.6f));
+            mTextPaint.setTextSize(mTextSize);
+        } else {
+            updateExtraPercentFontSize();
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/omni/BatteryDroidView.java b/packages/SystemUI/src/com/android/systemui/omni/BatteryDroidView.java
new file mode 100755
index 0000000..824e03b
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/BatteryDroidView.java
@@ -0,0 +1,195 @@
+/*
+ *  Copyright (C) 2016 The OmniROM Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.DashPathEffect;
+import android.graphics.Paint;
+import android.graphics.PaintFlagsDrawFilter;
+import android.graphics.Path;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.util.Log;
+import android.util.DisplayMetrics;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+
+import java.text.NumberFormat;
+
+public class BatteryDroidView extends AbstractBatteryView implements
+        BatteryController.BatteryStateChangeCallback {
+    public static final String TAG = BatteryDroidView.class.getSimpleName();
+
+    private static final int FULL = 96;
+
+    private final Paint mFramePaint, mBatteryPaint;
+    private int mCircleWidth;
+    private int mHeight;
+    private int mWidth;
+    private int mStrokeWidth;
+    private int mPercentOffsetY;
+    private int mImageOffset;
+
+    private final Path mBoltPath = new Path();
+
+    private final RectF mFrame = new RectF();
+    private final RectF mButtonFrame = new RectF();
+    private final RectF mBoltFrame = new RectF();
+
+    private final Path mShapePath = new Path();
+    private final Path mClipPath = new Path();
+    private final Path mTextPath = new Path();
+
+    private Bitmap mDroid;
+
+    public BatteryDroidView(Context context) {
+        this(context, null, 0);
+    }
+
+    public BatteryDroidView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BatteryDroidView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        mFramePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mFramePaint.setColor(mFrameColor);
+        mFramePaint.setDither(true);
+        mFramePaint.setAntiAlias(true);
+        mFramePaint.setStyle(Paint.Style.STROKE);
+        mFramePaint.setPathEffect(null);
+
+        mBatteryPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mBatteryPaint.setDither(true);
+        mBatteryPaint.setAntiAlias(true);
+        mBatteryPaint.setStyle(Paint.Style.STROKE);
+        mBatteryPaint.setPathEffect(null);
+
+        applyStyle();
+
+        DisplayMetrics metrics = getResources().getDisplayMetrics();
+        mCircleWidth = (int) (13 * metrics.density + 0.5f);
+        mStrokeWidth = (int) (1.3 * metrics.density + 0.5f);
+        mBatteryPaint.setStrokeWidth(mStrokeWidth);
+        mFramePaint.setStrokeWidth(mStrokeWidth);
+        mPercentOffsetY = (int) (0.5 * metrics.density + 0.5f);
+        mDroid = ((BitmapDrawable) getResources().getDrawable(
+                R.drawable.statusbar_battery_kronic)).getBitmap();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        mWidth = (mShowPercent ? (mTextWidth + mStrokeWidth) : 0) + mCircleWidth
+                + 2 * mStrokeWidth;
+        mHeight = mCircleWidth + 2 * mStrokeWidth;
+        setMeasuredDimension(mWidth, mHeight);
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        BatteryTracker tracker = mTracker;
+        final int level = tracker.level;
+        if (level == BatteryTracker.UNKNOWN_LEVEL) return;
+
+        mFrame.set(mStrokeWidth, mStrokeWidth, mHeight - mStrokeWidth,
+                mHeight - mStrokeWidth);
+
+        RectF frameDroid = new RectF();
+        frameDroid.set(mStrokeWidth + 2, mStrokeWidth + 2, mHeight - mStrokeWidth - 2,
+                mHeight - mStrokeWidth - 2);
+
+        mBatteryPaint.setColor(getCurrentColor(level));
+        mFramePaint.setColor(mFrameColor);
+
+        // pad circle percentage to 100% once it reaches 97%
+        // for one, the circle looks odd with a too small gap,
+        // for another, some phones never reach 100% due to hardware design
+        int padLevel = level;
+        if (padLevel >= 97) {
+            padLevel = 100;
+        } else if (padLevel <= 3) {
+            // pad nearly invisible below 3% - looks odd
+            padLevel = 3;
+        }
+
+        // draw the droid
+        c.drawBitmap(mDroid, null, frameDroid, null);
+        // draw gray ring first
+        c.drawArc(mFrame, 270, 360, false, mFramePaint);
+        // draw colored arc representing charge level
+        c.drawArc(mFrame, 270, 3.6f * padLevel, false, mBatteryPaint);
+
+        if (mShowPercent) {
+            updatePercentFontSize();
+            mTextPaint.setColor(getCurrentColor(level));
+
+            float textHeight = 0f;
+            float textOffset = 0f;
+            RectF bounds = null;
+            String percentage = null;
+
+            percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
+            textHeight = mTextPaint.descent() - mTextPaint.ascent();
+            textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+            bounds = new RectF(mCircleWidth + 3 * mStrokeWidth, mPercentOffsetY,
+                    mWidth, mHeight);
+
+            if (percentage != null) {
+                c.drawText(percentage, mWidth, bounds.centerY() + textOffset, mTextPaint);
+            }
+        }
+    }
+
+    @Override
+    protected void applyStyle() {
+        final int level = mTracker.level;
+        Typeface font = Typeface.create("sans-serif-medium", Typeface.NORMAL);
+        mTextPaint.setTypeface(font);
+        mTextPaint.setTextAlign(Paint.Align.RIGHT);
+        mTextSize = getResources().getDimensionPixelSize(level == 100 ?
+                R.dimen.omni_battery_level_text_size_small :
+                R.dimen.omni_battery_level_text_size);
+        mTextPaint.setTextSize(mTextSize);
+        Rect bounds = new Rect();
+        String text = level == 100 ? "100%" : ".00%";
+        mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+        mTextWidth = bounds.width();
+    }
+
+    private void updatePercentFontSize() {
+        updateExtraPercentFontSize();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/omni/BatteryMeterHorizontalView.java b/packages/SystemUI/src/com/android/systemui/omni/BatteryMeterHorizontalView.java
new file mode 100755
index 0000000..7f49795
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/BatteryMeterHorizontalView.java
@@ -0,0 +1,302 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.util.Log;
+import android.util.DisplayMetrics;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+
+import java.text.NumberFormat;
+
+public class BatteryMeterHorizontalView extends AbstractBatteryView implements
+        BatteryController.BatteryStateChangeCallback {
+    public static final String TAG = BatteryMeterHorizontalView.class.getSimpleName();
+
+    private static final float BOLT_LEVEL_THRESHOLD = 0.3f;  // opaque bolt below this fraction
+    private static final int FULL = 96;
+
+    private float mButtonHeightFraction;
+    private float mSubpixelSmoothingLeft;
+    private float mSubpixelSmoothingRight;
+    private final Paint mFramePaint, mBatteryPaint;
+    private int mBarWidth;
+    private int mBarSpaceWidth;
+    private int mBarHeight;
+    private int mHeight;
+    private int mWidth;
+    private int mPercentOffsetY;
+    private int mBoltWidth;
+
+    private final Path mBoltPath = new Path();
+
+    private final RectF mFrame = new RectF();
+    private final RectF mButtonFrame = new RectF();
+    private final RectF mBoltFrame = new RectF();
+
+    private final Path mShapePath = new Path();
+    private final Path mClipPath = new Path();
+    private final Path mTextPath = new Path();
+
+    public BatteryMeterHorizontalView(Context context) {
+        this(context, null, 0);
+    }
+
+    public BatteryMeterHorizontalView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BatteryMeterHorizontalView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        mButtonHeightFraction = getResources().getFraction(
+                R.fraction.battery_button_height_fraction, 1, 1);
+        mSubpixelSmoothingLeft = getResources().getFraction(
+                R.fraction.battery_subpixel_smoothing_left, 1, 1);
+        mSubpixelSmoothingRight = getResources().getFraction(
+                R.fraction.battery_subpixel_smoothing_right, 1, 1);
+
+        mFramePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mFramePaint.setColor(mFrameColor);
+        mFramePaint.setDither(true);
+        mFramePaint.setStrokeWidth(0);
+        mFramePaint.setStyle(Paint.Style.FILL_AND_STROKE);
+
+        mBatteryPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mBatteryPaint.setDither(true);
+        mBatteryPaint.setStrokeWidth(0);
+        mBatteryPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+
+        applyStyle();
+
+        // bar width is hardcoded  android:layout_width="14.5dp"
+        DisplayMetrics metrics = getResources().getDisplayMetrics();
+        mBarWidth = (int) (20 * metrics.density + 0.5f);
+        mBarSpaceWidth = (int) (22 * metrics.density + 0.5f);
+        mBarHeight = (int) (10 * metrics.density + 0.5f);
+        mPercentOffsetY = (int) (1 * metrics.density + 0.5f);
+        mBoltWidth = (int) (8 * metrics.density + 0.5f);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        mWidth = (isWideDisplay() ? mTextWidth : 0) + mBarSpaceWidth;
+        mHeight = getMeasuredHeight();
+        setMeasuredDimension(mWidth, mHeight);
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        BatteryTracker tracker = mTracker;
+        final int level = tracker.level;
+        if (level == BatteryTracker.UNKNOWN_LEVEL) return;
+
+        float drawFrac = (float) level / 100f;
+        final int height = mHeight;
+        final int width = mBarWidth;
+        final int buttonWidth = (int) (width * mButtonHeightFraction);
+
+        final int insetTop = (height - mBarHeight) / 2 + mPercentOffsetY;
+        final int insetBottom = (height - mBarHeight) / 2 - mPercentOffsetY;
+
+        mFrame.set(0, 0, width, height);
+
+        // button-frame: area right of the battery body
+        mButtonFrame.set(
+                mFrame.right - buttonWidth,
+                mFrame.top  + insetTop + Math.round(mBarHeight * 0.25f),
+                mFrame.right,
+                mFrame.bottom - insetBottom - Math.round(mBarHeight * 0.25f));
+
+        mButtonFrame.top += mSubpixelSmoothingLeft;
+        mButtonFrame.bottom += mSubpixelSmoothingLeft;
+        mButtonFrame.right -= mSubpixelSmoothingRight;
+
+        // set the battery charging color
+        mBatteryPaint.setColor(getCurrentColor(level));
+        mFramePaint.setColor(mFrameColor);
+
+        if (level >= FULL) {
+            drawFrac = 1f;
+        } else if (level <= mCriticalLevel) {
+            drawFrac = 0f;
+        }
+
+        final float levelTop = drawFrac == 1f ? mButtonFrame.right
+                : (mFrame.right - (mFrame.width() * (1f - drawFrac)));
+
+        // define the battery shape
+        mShapePath.reset();
+        mShapePath.moveTo(mButtonFrame.left, mButtonFrame.top);
+        mShapePath.lineTo(mButtonFrame.right, mButtonFrame.top);
+        mShapePath.lineTo(mButtonFrame.right, mButtonFrame.bottom);
+        mShapePath.lineTo(mButtonFrame.left, mButtonFrame.bottom);
+        mShapePath.lineTo(mFrame.right - buttonWidth, mFrame.bottom - insetBottom);
+        mShapePath.lineTo(mFrame.left, mFrame.bottom - insetBottom);
+        mShapePath.lineTo(mFrame.left, mFrame.top + insetTop);
+        mShapePath.lineTo(mFrame.right - buttonWidth, mFrame.top + insetTop);
+        mShapePath.lineTo(mButtonFrame.left, mButtonFrame.top);
+
+        if (showChargingImage()) {
+            // define the bolt shape
+            final float bl = mFrame.left + mFrame.width() / 2f - mBoltWidth / 2f;
+            final float bt = mFrame.top + insetTop + 5;
+            final float br = mFrame.right - mFrame.width() / 2f + mBoltWidth / 2f;
+            final float bb = mFrame.bottom - insetBottom - 2;
+            if (mBoltFrame.left != bl || mBoltFrame.top != bt
+                    || mBoltFrame.right != br || mBoltFrame.bottom != bb) {
+                mBoltFrame.set(bl, bt, br, bb);
+                mBoltPath.reset();
+                mBoltPath.moveTo(
+                        mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),
+                        mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
+                for (int i = 2; i < mBoltPoints.length; i += 2) {
+                    mBoltPath.lineTo(
+                            mBoltFrame.left + mBoltPoints[i] * mBoltFrame.width(),
+                            mBoltFrame.top + mBoltPoints[i + 1] * mBoltFrame.height());
+                }
+                mBoltPath.lineTo(
+                        mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),
+                        mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
+            }
+
+            if (drawFrac <= BOLT_LEVEL_THRESHOLD) {
+                // draw the bolt if opaque
+                c.drawPath(mBoltPath, mBoltPaint);
+            } else {
+                // otherwise cut the bolt out of the overall shape
+                mShapePath.op(mBoltPath, Path.Op.DIFFERENCE);
+            }
+        }
+
+        RectF bounds = null;
+        String percentage = null;
+        float textHeight = 0f;
+        float textOffset = 0f;
+        boolean pctOpaque = false;
+
+        if (mShowPercent) {
+            updatePercentFontSize();
+            if (!mPercentInside) {
+                mTextPaint.setColor(getCurrentColor(level));
+            }
+
+            if (mPercentInside) {
+                if (!showChargingImage()) {
+                    percentage = String.valueOf(level);
+                    textHeight = mTextPaint.descent() - mTextPaint.ascent();
+                    textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+                    bounds = new RectF(0, 0, mBarWidth - buttonWidth, mHeight);
+                }
+            } else {
+                percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
+                textHeight = mTextPaint.descent() - mTextPaint.ascent();
+                textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+                bounds = new RectF(mBarSpaceWidth, 0, mWidth, mHeight);
+            }
+            if (percentage != null) {
+                if (mPercentInside) {
+                    if (!showChargingImage()) {
+                        pctOpaque = levelTop > bounds.centerX() - mTextWidth / 2;
+                        if (pctOpaque) {
+                            mTextPath.reset();
+                            mTextPaint.getTextPath(percentage, 0, percentage.length(),
+                                    bounds.centerX(), bounds.centerY() + textOffset, mTextPath);
+                            mShapePath.op(mTextPath, Path.Op.DIFFERENCE);
+                        }
+                    }
+                }
+            }
+        }
+
+        // draw the battery shape background
+        c.drawPath(mShapePath, mFramePaint);
+
+        // draw the battery shape, clipped to charging level
+        mFrame.right = levelTop;
+        mClipPath.reset();
+        mClipPath.addRect(mFrame,  Path.Direction.CCW);
+        mShapePath.op(mClipPath, Path.Op.INTERSECT);
+        c.drawPath(mShapePath, mBatteryPaint);
+
+        if (mShowPercent && (!mPercentInside || !pctOpaque)) {
+            if (percentage != null) {
+                if (mPercentInside) {
+                    c.drawText(percentage, bounds.centerX(), bounds.centerY() + textOffset,
+                            mTextPaint);
+                } else {
+                    c.drawText(percentage, mWidth, bounds.centerY() + textOffset, mTextPaint);
+                }
+            }
+        }
+    }
+
+    @Override
+    protected void applyStyle() {
+        final int level = mTracker.level;
+        if (mPercentInside) {
+            Typeface font = Typeface.create("sans-serif-condensed", Typeface.BOLD);
+            mTextPaint.setTextAlign(Paint.Align.CENTER);
+            mTextPaint.setTypeface(font);
+            DisplayMetrics metrics = mContext.getResources().getDisplayMetrics();
+            mTextSize = (int) (10 * metrics.density + 0.5f);
+            mTextPaint.setTextSize(mTextSize);
+            Rect bounds = new Rect();
+            String text = "100";
+            mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+            mTextWidth = bounds.width();
+        } else {
+            Typeface font = Typeface.create("sans-serif-medium", Typeface.NORMAL);
+            mTextPaint.setTypeface(font);
+            mTextPaint.setTextAlign(Paint.Align.RIGHT);
+            mTextSize = getResources().getDimensionPixelSize(level == 100 ?
+                    R.dimen.omni_battery_level_text_size_small :
+                    R.dimen.omni_battery_level_text_size);
+            mTextPaint.setTextSize(mTextSize);
+            Rect bounds = new Rect();
+            String text = level == 100 ? "100%" : ".00%";
+            mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+            mTextWidth = bounds.width();
+        }
+    }
+
+    private void updatePercentFontSize() {
+        if (!mPercentInside) {
+            updateExtraPercentFontSize();
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/omni/BatteryMeterPercentView.java b/packages/SystemUI/src/com/android/systemui/omni/BatteryMeterPercentView.java
new file mode 100755
index 0000000..6c0d6fe
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/BatteryMeterPercentView.java
@@ -0,0 +1,310 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.util.Log;
+import android.util.DisplayMetrics;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+
+import java.text.NumberFormat;
+
+public class BatteryMeterPercentView extends AbstractBatteryView implements
+        BatteryController.BatteryStateChangeCallback {
+    public static final String TAG = BatteryMeterPercentView.class.getSimpleName();
+
+    private static final float BOLT_LEVEL_THRESHOLD = 0.3f;  // opaque bolt below this fraction
+    private static final int FULL = 96;
+
+    private float mButtonHeightFraction;
+    private float mSubpixelSmoothingLeft;
+    private float mSubpixelSmoothingRight;
+    private final Paint mFramePaint, mBatteryPaint;
+    private int mBarWidth;
+    private int mBarSpaceWidth;
+    private int mHeight;
+    private int mWidth;
+    private int mPercentOffsetY;
+
+    private final Path mBoltPath = new Path();
+
+    private final RectF mFrame = new RectF();
+    private final RectF mButtonFrame = new RectF();
+    private final RectF mBoltFrame = new RectF();
+
+    private final Path mShapePath = new Path();
+    private final Path mClipPath = new Path();
+    private final Path mTextPath = new Path();
+
+    public BatteryMeterPercentView(Context context) {
+        this(context, null, 0);
+    }
+
+    public BatteryMeterPercentView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BatteryMeterPercentView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        mButtonHeightFraction = getResources().getFraction(
+                R.fraction.battery_button_height_fraction, 1, 1);
+        mSubpixelSmoothingLeft = getResources().getFraction(
+                R.fraction.battery_subpixel_smoothing_left, 1, 1);
+        mSubpixelSmoothingRight = getResources().getFraction(
+                R.fraction.battery_subpixel_smoothing_right, 1, 1);
+
+        mFramePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mFramePaint.setColor(mFrameColor);
+        mFramePaint.setDither(true);
+        mFramePaint.setStrokeWidth(0);
+        mFramePaint.setStyle(Paint.Style.FILL_AND_STROKE);
+
+        mBatteryPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mBatteryPaint.setDither(true);
+        mBatteryPaint.setStrokeWidth(0);
+        mBatteryPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+
+        applyStyle();
+
+        DisplayMetrics metrics = getResources().getDisplayMetrics();
+        mBarWidth = (int) (10 * metrics.density + 0.5f);
+        mBarSpaceWidth = (int) (14 * metrics.density + 0.5f);
+        mPercentOffsetY = (int) (1 * metrics.density + 0.5f);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        mWidth = (isWideDisplay() ? mTextWidth : 0) + mBarSpaceWidth;
+        mHeight = getMeasuredHeight();
+        setMeasuredDimension(mWidth, mHeight);
+    }
+
+    private int getBarInset() {
+        return (mBarSpaceWidth - mBarWidth) / 2;
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        final int level = mTracker.level;
+        if (level == BatteryTracker.UNKNOWN_LEVEL) return;
+
+        float drawFrac = (float) level / 100f;
+        final int height = mHeight;
+        final int width = mBarWidth;
+        final int buttonHeight = (int) (height * mButtonHeightFraction);
+
+        mFrame.set(getBarInset(), 0, getBarInset() + mBarWidth, height);
+
+        // button-frame: area above the battery body
+        mButtonFrame.set(
+                mFrame.left + Math.round(width * 0.25f),
+                mFrame.top,
+                mFrame.right - Math.round(width * 0.25f),
+                mFrame.top + buttonHeight);
+
+        mButtonFrame.top += mSubpixelSmoothingLeft;
+        mButtonFrame.left += mSubpixelSmoothingLeft;
+        mButtonFrame.right -= mSubpixelSmoothingRight;
+
+        // frame: battery body area
+        mFrame.top += buttonHeight;
+        mFrame.left += mSubpixelSmoothingLeft;
+        mFrame.top += mSubpixelSmoothingLeft;
+        mFrame.right -= mSubpixelSmoothingRight;
+        mFrame.bottom -= mSubpixelSmoothingRight;
+
+        // set the battery charging color
+        mBatteryPaint.setColor(getCurrentColor(level));
+        mFramePaint.setColor(mFrameColor);
+
+        if (level >= FULL) {
+            drawFrac = 1f;
+        } else if (level <= mCriticalLevel) {
+            drawFrac = 0f;
+        }
+
+        final float levelTop = drawFrac == 1f ? mButtonFrame.top
+                : (mFrame.top + (mFrame.height() * (1f - drawFrac)));
+
+        // define the battery shape
+        mShapePath.reset();
+        mShapePath.moveTo(mButtonFrame.left, mButtonFrame.top);
+        mShapePath.lineTo(mButtonFrame.right, mButtonFrame.top);
+        mShapePath.lineTo(mButtonFrame.right, mFrame.top);
+        mShapePath.lineTo(mFrame.right, mFrame.top);
+        mShapePath.lineTo(mFrame.right, mFrame.bottom);
+        mShapePath.lineTo(mFrame.left, mFrame.bottom);
+        mShapePath.lineTo(mFrame.left, mFrame.top);
+        mShapePath.lineTo(mButtonFrame.left, mFrame.top);
+        mShapePath.lineTo(mButtonFrame.left, mButtonFrame.top);
+
+        if (showChargingImage()) {
+            // define the bolt shape
+            final float bl = mFrame.left + mFrame.width() / 4.5f;
+            final float bt = mFrame.top + mFrame.height() / 6f;
+            final float br = mFrame.right - mFrame.width() / 7f;
+            final float bb = mFrame.bottom - mFrame.height() / 10f;
+            if (mBoltFrame.left != bl || mBoltFrame.top != bt
+                    || mBoltFrame.right != br || mBoltFrame.bottom != bb) {
+                mBoltFrame.set(bl, bt, br, bb);
+                mBoltPath.reset();
+                mBoltPath.moveTo(
+                        mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),
+                        mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
+                for (int i = 2; i < mBoltPoints.length; i += 2) {
+                    mBoltPath.lineTo(
+                            mBoltFrame.left + mBoltPoints[i] * mBoltFrame.width(),
+                            mBoltFrame.top + mBoltPoints[i + 1] * mBoltFrame.height());
+                }
+                mBoltPath.lineTo(
+                        mBoltFrame.left + mBoltPoints[0] * mBoltFrame.width(),
+                        mBoltFrame.top + mBoltPoints[1] * mBoltFrame.height());
+            }
+
+            float boltPct = (mBoltFrame.bottom - levelTop) / (mBoltFrame.bottom - mBoltFrame.top);
+            boltPct = Math.min(Math.max(boltPct, 0), 1);
+            if (boltPct <= BOLT_LEVEL_THRESHOLD) {
+                // draw the bolt if opaque
+                c.drawPath(mBoltPath, mBoltPaint);
+            } else {
+                // otherwise cut the bolt out of the overall shape
+                mShapePath.op(mBoltPath, Path.Op.DIFFERENCE);
+            }
+        }
+
+        RectF bounds = null;
+        String percentage = null;
+        boolean pctOpaque = false;
+        float textOffset = 0f;
+
+        if (mShowPercent) {
+            updatePercentFontSize();
+            if (!mPercentInside) {
+                mTextPaint.setColor(getCurrentColor(level));
+            }
+            float textHeight = 0f;
+
+            if (mPercentInside) {
+                if (!showChargingImage()) {
+                    percentage = String.valueOf(level);
+                    textHeight = mTextPaint.descent() - mTextPaint.ascent();
+                    textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+                    bounds = new RectF(0, 0, mWidth, mHeight);
+                }
+            } else {
+                percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
+                textHeight = mTextPaint.descent() - mTextPaint.ascent();
+                textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+                bounds = new RectF(mBarSpaceWidth, 0, mWidth, mHeight);
+            }
+            if (percentage != null) {
+                if (mPercentInside) {
+                    if (!showChargingImage()) {
+                        pctOpaque = levelTop > bounds.centerY() + textOffset;
+                        if (!pctOpaque) {
+                            mTextPath.reset();
+                            mTextPaint.getTextPath(percentage, 0, percentage.length(), bounds.centerX(),
+                                    bounds.centerY() + textOffset, mTextPath);
+                            mShapePath.op(mTextPath, Path.Op.DIFFERENCE);
+                        }
+                    }
+                }
+            }
+        }
+
+        // draw the battery shape background
+        c.drawPath(mShapePath, mFramePaint);
+
+        // draw the battery shape, clipped to charging level
+        mFrame.top = levelTop;
+        mClipPath.reset();
+        mClipPath.addRect(mFrame,  Path.Direction.CCW);
+        mShapePath.op(mClipPath, Path.Op.INTERSECT);
+        c.drawPath(mShapePath, mBatteryPaint);
+
+        if (mShowPercent && (!mPercentInside || pctOpaque)) {
+            if (percentage != null) {
+                if (mPercentInside) {
+                    c.drawText(percentage, bounds.centerX(), bounds.centerY() + textOffset, mTextPaint);
+                } else {
+                    c.drawText(percentage, mWidth, bounds.centerY() + textOffset, mTextPaint);
+                }
+            }
+        }
+    }
+
+    @Override
+    protected void applyStyle() {
+        final int level = mTracker.level;
+        if (mPercentInside) {
+            Typeface font = Typeface.create("sans-serif-condensed", Typeface.BOLD);
+            mTextPaint.setTypeface(font);
+            mTextPaint.setTextAlign(Paint.Align.CENTER);
+            DisplayMetrics metrics = mContext.getResources().getDisplayMetrics();
+            mTextSize = (int) ((level == 100 ? 7 : 9) * metrics.density + 0.5f);
+            mTextPaint.setTextSize(mTextSize);
+            Rect bounds = new Rect();
+            String text = "100";
+            mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+            mTextWidth = bounds.width();
+        } else {
+            Typeface font = Typeface.create("sans-serif-medium", Typeface.NORMAL);
+            mTextPaint.setTypeface(font);
+            mTextPaint.setTextAlign(Paint.Align.RIGHT);
+            mTextSize = getResources().getDimensionPixelSize(level == 100 ?
+                    R.dimen.omni_battery_level_text_size_small :
+                    R.dimen.omni_battery_level_text_size);
+            mTextPaint.setTextSize(mTextSize);
+            Rect bounds = new Rect();
+            String text = level == 100 ? "100%" : ".00%";
+            mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+            mTextWidth = bounds.width();
+        }
+    }
+
+    private void updatePercentFontSize() {
+        final int level = mTracker.level;
+        if (mPercentInside) {
+            DisplayMetrics metrics = mContext.getResources().getDisplayMetrics();
+            mTextSize = (int) ((level == 100 ? 7 : 9) * metrics.density + 0.5f);
+            mTextPaint.setTextSize(mTextSize);
+        } else {
+            super.updateExtraPercentFontSize();
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/omni/BatteryPercentView.java b/packages/SystemUI/src/com/android/systemui/omni/BatteryPercentView.java
new file mode 100755
index 0000000..c74fda4
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/BatteryPercentView.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Typeface;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.util.Log;
+import android.util.DisplayMetrics;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+
+import java.text.NumberFormat;
+
+public class BatteryPercentView extends AbstractBatteryView implements
+        BatteryController.BatteryStateChangeCallback {
+    public static final String TAG = BatteryPercentView.class.getSimpleName();
+
+    private int mPercentOffsetY;
+    private int mHeight;
+    private int mWidth;
+
+    public BatteryPercentView(Context context) {
+        this(context, null, 0);
+    }
+
+    public BatteryPercentView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BatteryPercentView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        DisplayMetrics metrics = getResources().getDisplayMetrics();
+        mPercentOffsetY = (int) (1 * metrics.density + 0.5f);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        mWidth = mTextWidth;
+        mHeight = getMeasuredHeight();
+        setMeasuredDimension(mWidth, mHeight);
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        BatteryTracker tracker = mTracker;
+        final int level = tracker.level;
+
+        if (level == BatteryTracker.UNKNOWN_LEVEL) return;
+
+        updatePercentFontSize();
+        mTextPaint.setColor(getCurrentColor(level));
+
+        float textHeight = 0f;
+        float textOffset = 0f;
+        RectF bounds = null;
+        String percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
+        textHeight = mTextPaint.descent() - mTextPaint.ascent();
+        textOffset = (textHeight / 2) - mTextPaint.descent() + mPercentOffsetY;
+        bounds = new RectF(0, 0, mWidth, mHeight);
+
+        if (percentage != null) {
+            c.drawText(percentage, mWidth, bounds.centerY() + textOffset, mTextPaint);
+        }
+    }
+
+    @Override
+    protected void applyStyle() {
+        final int level = mTracker.level;
+        mTextSize = getResources().getDimensionPixelSize(level == 100 ?
+                R.dimen.omni_battery_level_text_size_small : R.dimen.omni_battery_level_text_size);
+        mTextPaint.setTextSize(mTextSize);
+        Typeface font = Typeface.create("sans-serif-medium", Typeface.NORMAL);
+        mTextPaint.setTypeface(font);
+        mTextPaint.setTextAlign(Paint.Align.RIGHT);
+        Rect bounds = new Rect();
+        String text = level == 100 ? "100%" : ".00%";
+        mTextPaint.getTextBounds(text, 0, text.length(), bounds);
+        mTextWidth = bounds.width();
+    }
+
+    private void updatePercentFontSize() {
+        updateExtraPercentFontSize();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/omni/BatteryViewManager.java b/packages/SystemUI/src/com/android/systemui/omni/BatteryViewManager.java
new file mode 100644
index 0000000..27298f0
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/omni/BatteryViewManager.java
@@ -0,0 +1,212 @@
+/*
+ *  Copyright (C) 2015-2016 The OmniROM Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.omni;
+
+import android.database.ContentObserver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Resources;
+import android.os.Handler;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.LinearLayout;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.policy.BatteryController;
+import com.android.systemui.statusbar.phone.BarTransitions;
+
+import java.util.List;
+import java.util.ArrayList;
+
+public class BatteryViewManager {
+    public static final String TAG = BatteryViewManager.class.getSimpleName();
+    private LinearLayout mContainerView;
+    private Context mContext;
+    private Handler mHandler;
+    private int mBatteryStyle;
+    private int mShowPercent;
+    private boolean mPercentInside;
+    private boolean mChargingImage = true;
+    private boolean mExpandedView;
+    private List<AbstractBatteryView> mBatteryStyleList = new ArrayList<AbstractBatteryView>();
+    private AbstractBatteryView mCurrentBatteryView;
+    private BatteryController mBatteryController;
+    private BarTransitions mBarTransitions;
+    private BatteryViewManagerObserver mBatteryStyleObserver;
+
+    public interface BatteryViewManagerObserver {
+        public void batteryStyleChanged(AbstractBatteryView batteryStyle);
+
+        public boolean isExpandedBatteryView();
+    }
+
+    private ContentObserver mSettingsObserver = new ContentObserver(mHandler) {
+        @Override
+        public void onChange(boolean selfChange) {
+            update();
+        }
+    };
+
+    public BatteryViewManager(Context context, LinearLayout mContainer, BarTransitions barTransitions,
+        BatteryViewManagerObserver observer) {
+        mContext = context;
+        mContainerView = mContainer;
+        mBarTransitions = barTransitions;
+        mBatteryStyleObserver = observer;
+        mHandler = new Handler();
+
+        AbstractBatteryView view = (AbstractBatteryView) LayoutInflater.from(mContext).inflate(
+                R.layout.battery_meter_percent_view, mContainerView, false);
+        mBatteryStyleList.add(view);
+
+        view = (AbstractBatteryView) LayoutInflater.from(mContext).inflate(
+                R.layout.battery_meter_horizontal_view, mContainerView, false);
+        mBatteryStyleList.add(view);
+
+        view = (AbstractBatteryView) LayoutInflater.from(mContext).inflate(
+                R.layout.battery_circle_percent_view, mContainerView, false);
+        mBatteryStyleList.add(view);
+
+        view = (AbstractBatteryView) LayoutInflater.from(mContext).inflate(
+                R.layout.battery_percent_view, mContainerView, false);
+        mBatteryStyleList.add(view);
+
+        view = (AbstractBatteryView) LayoutInflater.from(mContext).inflate(
+                R.layout.battery_droid_view, mContainerView, false);
+        mBatteryStyleList.add(view);
+
+        view = (AbstractBatteryView) LayoutInflater.from(mContext).inflate(
+                R.layout.battery_hidden_view, mContainerView, false);
+        mBatteryStyleList.add(view);
+
+        mContext.getContentResolver().registerContentObserver(
+                Settings.System.getUriFor(Settings.System.STATUSBAR_BATTERY_STYLE), false,
+                mSettingsObserver, UserHandle.USER_ALL);
+        mContext.getContentResolver().registerContentObserver(
+                Settings.System.getUriFor(Settings.System.STATUSBAR_BATTERY_PERCENT), false,
+                mSettingsObserver, UserHandle.USER_ALL);
+        mContext.getContentResolver().registerContentObserver(
+                Settings.System.getUriFor(Settings.System.STATUSBAR_BATTERY_PERCENT_INSIDE), false,
+                mSettingsObserver, UserHandle.USER_ALL);
+        mContext.getContentResolver().registerContentObserver(
+                Settings.System.getUriFor(Settings.System.STATUSBAR_BATTERY_CHARGING_IMAGE), false,
+                mSettingsObserver, UserHandle.USER_ALL);
+
+        mExpandedView = observer != null ? observer.isExpandedBatteryView() : false;
+        update();
+    }
+
+    public void setBatteryController(BatteryController batteryController) {
+        mBatteryController = batteryController;
+
+        if (mCurrentBatteryView != null) {
+            mCurrentBatteryView.setBatteryController(mBatteryController);
+            applyStyle();
+            mContainerView.addView(mCurrentBatteryView);
+            if (mBarTransitions != null) {
+                mBarTransitions.updateBattery(mCurrentBatteryView);
+            }
+        }
+        notifyObserver();
+    }
+
+    private void switchBatteryStyle(int style, int showPercent, boolean percentInside,
+            boolean chargingImage) {
+
+        if (style >= mBatteryStyleList.size()) {
+            return;
+        }
+
+        mBatteryStyle = style;
+        mShowPercent = showPercent;
+        mPercentInside = percentInside;
+        mChargingImage = chargingImage;
+
+        if (mCurrentBatteryView != null) {
+            mContainerView.removeView(mCurrentBatteryView);
+        }
+        mCurrentBatteryView = null;
+
+        int batteryIndex = mBatteryStyle;
+        if (batteryIndex != -1) {
+            mCurrentBatteryView = mBatteryStyleList.get(batteryIndex);
+            mCurrentBatteryView.setBatteryController(mBatteryController);
+            applyStyle();
+            mContainerView.addView(mCurrentBatteryView);
+        }
+
+        if (mBarTransitions != null) {
+            mBarTransitions.updateBattery(mCurrentBatteryView);
+        }
+        notifyObserver();
+    }
+
+    private void notifyObserver() {
+        if (mBatteryStyleObserver != null) {
+            mBatteryStyleObserver.batteryStyleChanged(mCurrentBatteryView);
+        }
+    }
+
+    public AbstractBatteryView getCurrentBatteryView() {
+        return mCurrentBatteryView;
+    }
+
+    private void applyStyle() {
+        mCurrentBatteryView.setPercentInside(mPercentInside && mBatteryStyle != 3);
+        boolean showPercentReally = mExpandedView ? mShowPercent != 0 : mShowPercent == 1;
+        mCurrentBatteryView.setShowPercent(showPercentReally);
+        mCurrentBatteryView.setChargingImage(mChargingImage);
+        mCurrentBatteryView.applyStyle();
+    }
+
+    public void update() {
+        final int batteryStyle = Settings.System.getIntForUser(mContext.getContentResolver(),
+                Settings.System.STATUSBAR_BATTERY_STYLE, 0, UserHandle.USER_CURRENT);
+        final int showPercent = Settings.System.getIntForUser(mContext.getContentResolver(),
+                Settings.System.STATUSBAR_BATTERY_PERCENT, 0, UserHandle.USER_CURRENT);
+        final boolean percentInside = Settings.System.getIntForUser(mContext.getContentResolver(),
+                Settings.System.STATUSBAR_BATTERY_PERCENT_INSIDE, 0, UserHandle.USER_CURRENT) != 0;
+        final boolean chargingImage = Settings.System.getIntForUser(mContext.getContentResolver(),
+                    Settings.System.STATUSBAR_BATTERY_CHARGING_IMAGE, 1, UserHandle.USER_CURRENT) == 1;
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                switchBatteryStyle(batteryStyle, showPercent, percentInside, chargingImage);
+            }
+        });
+    }
+
+    public void setDarkIntensity(float darkIntensity) {
+        if (mCurrentBatteryView != null) {
+            mCurrentBatteryView.setDarkIntensity(darkIntensity);
+        }
+    }
+
+    public void setTextShadow(boolean enabled) {
+        if (mCurrentBatteryView != null) {
+            mCurrentBatteryView.setTextShadow(enabled);
+        }
+    }
+
+    public void onDensityOrFontScaleChanged() {
+        mCurrentBatteryView.requestLayout();
+        mCurrentBatteryView.invalidate();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/car/CarStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/car/CarStatusBar.java
index d1fc780..18fbd4c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/car/CarStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/car/CarStatusBar.java
@@ -73,7 +73,11 @@ public class CarStatusBar extends PhoneStatusBar implements
     protected PhoneStatusBarView makeStatusBarView() {
         PhoneStatusBarView statusBarView = super.makeStatusBarView();
 
+        View batteryContainer = statusBarView.findViewById(R.id.battery_container);
+        batteryContainer.setVisibility(View.GONE);
+
         mBatteryMeterView = ((BatteryMeterView) statusBarView.findViewById(R.id.battery));
+        mBatteryMeterView.setBatteryController(mCarBatteryController);
 
         // By default, the BatteryMeterView should not be visible. It will be toggled visible
         // when a device has connected by bluetooth.
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/BarTransitions.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/BarTransitions.java
index ed71e57..85f4e91 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/BarTransitions.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/BarTransitions.java
@@ -35,6 +35,7 @@ import android.view.View;
 
 import com.android.systemui.Interpolators;
 import com.android.systemui.R;
+import com.android.systemui.omni.AbstractBatteryView;
 
 public class BarTransitions {
     private static final boolean DEBUG = false;
@@ -70,6 +71,9 @@ public class BarTransitions {
         }
     }
 
+    public void updateBattery(AbstractBatteryView battery) {
+    }
+
     public int getMode() {
         return mMode;
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardStatusBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardStatusBarView.java
index 74e5c14..5c9657d 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardStatusBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardStatusBarView.java
@@ -30,6 +30,7 @@ import android.util.TypedValue;
 import android.view.View;
 import android.view.ViewTreeObserver;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
@@ -37,6 +38,8 @@ import com.android.systemui.BatteryMeterView;
 import com.android.systemui.Interpolators;
 import com.android.systemui.R;
 import com.android.systemui.qs.QSPanel;
+import com.android.systemui.omni.AbstractBatteryView;
+import com.android.systemui.omni.BatteryViewManager;
 import com.android.systemui.statusbar.policy.BatteryController;
 import com.android.systemui.statusbar.policy.KeyguardUserSwitcher;
 import com.android.systemui.statusbar.policy.UserInfoController;
@@ -59,7 +62,7 @@ public class KeyguardStatusBarView extends RelativeLayout
     private View mSystemIconsSuperContainer;
     private MultiUserSwitch mMultiUserSwitch;
     private ImageView mMultiUserAvatar;
-    private TextView mBatteryLevel;
+    //private TextView mBatteryLevel;
 
     private TextView mKeyguardClock;
     private int mShowKeyguardClock;
@@ -69,6 +72,7 @@ public class KeyguardStatusBarView extends RelativeLayout
 
     private int mSystemIconsSwitcherHiddenExpandedMargin;
     private View mSystemIconsContainer;
+    private BatteryViewManager mBatteryViewManager;
 
     private ContentObserver mObserver = new ContentObserver(new Handler()) {
         public void onChange(boolean selfChange, Uri uri) {
@@ -101,11 +105,13 @@ public class KeyguardStatusBarView extends RelativeLayout
         mSystemIconsContainer = findViewById(R.id.system_icons_container);
         mMultiUserSwitch = (MultiUserSwitch) findViewById(R.id.multi_user_switch);
         mMultiUserAvatar = (ImageView) findViewById(R.id.multi_user_avatar);
-        mBatteryLevel = (TextView) findViewById(R.id.battery_level);
+        //mBatteryLevel = (TextView) findViewById(R.id.battery_level);
         mCarrierLabel = (TextView) findViewById(R.id.keyguard_carrier_text);
         mKeyguardClock = (TextView) findViewById(R.id.keyguard_clock);
         loadDimens();
         updateUserSwitcher();
+        LinearLayout batteryContainer = (LinearLayout) findViewById(R.id.battery_container);
+        mBatteryViewManager = new BatteryViewManager(mContext, batteryContainer, null, null);
         updateVisibilities();
     }
 
@@ -141,16 +147,6 @@ public class KeyguardStatusBarView extends RelativeLayout
                 R.dimen.status_bar_height);
         mSystemIconsContainer.setLayoutParams(lp);
 
-        lp = (MarginLayoutParams) mBatteryLevel.getLayoutParams();
-        lp.setMarginStart(
-                getResources().getDimensionPixelSize(R.dimen.header_battery_margin_keyguard));
-        mBatteryLevel.setLayoutParams(lp);
-        mBatteryLevel.setPaddingRelative(mBatteryLevel.getPaddingStart(),
-                mBatteryLevel.getPaddingTop(),
-                getResources().getDimensionPixelSize(R.dimen.battery_level_padding_end),
-                mBatteryLevel.getPaddingBottom());
-        mBatteryLevel.setTextSize(TypedValue.COMPLEX_UNIT_PX,
-                getResources().getDimensionPixelSize(R.dimen.battery_level_text_size));
         mKeyguardClock.setTextSize(TypedValue.COMPLEX_UNIT_PX,
                 getResources().getDimensionPixelSize(
                         com.android.internal.R.dimen.text_size_small_material));
@@ -184,16 +180,12 @@ public class KeyguardStatusBarView extends RelativeLayout
         } else if (mMultiUserSwitch.getParent() == this && mKeyguardUserSwitcherShowing) {
             removeView(mMultiUserSwitch);
         }
-        boolean showBatteryLevel = getResources().getBoolean(R.bool.config_showBatteryPercentage);
-        mBatteryLevel.setVisibility(
-                mBatteryCharging || showBatteryLevel ? View.VISIBLE : View.GONE);
         if (Settings.System.getInt(mContext.getContentResolver(),
                 Settings.System.KEYGUARD_SHOW_CLOCK, 0) == 1) {
             mKeyguardClock.setVisibility(View.VISIBLE);
         } else {
             mKeyguardClock.setVisibility(View.GONE);
         }
-        mBatteryLevel.setVisibility(mBatteryCharging ? View.VISIBLE : View.GONE);
 
         if (mCarrierLabel != null) {
             if (mShowCarrierLabel == 1) {
@@ -237,7 +229,7 @@ public class KeyguardStatusBarView extends RelativeLayout
 
     public void setBatteryController(BatteryController batteryController) {
         mBatteryController = batteryController;
-        ((BatteryMeterView) findViewById(R.id.battery)).setBatteryController(batteryController);
+        mBatteryViewManager.setBatteryController(mBatteryController);
     }
 
     public void setUserSwitcherController(UserSwitcherController controller) {
@@ -259,8 +251,6 @@ public class KeyguardStatusBarView extends RelativeLayout
 
     @Override
     public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
-        String percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
-        mBatteryLevel.setText(percentage);
         boolean changed = mBatteryCharging != charging;
         mBatteryCharging = charging;
         if (changed) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 50b8783..ab1cc6c 100755
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -133,6 +133,7 @@ import com.android.systemui.doze.DozeHost;
 import com.android.systemui.doze.DozeLog;
 import com.android.systemui.keyguard.KeyguardViewMediator;
 import com.android.systemui.qs.QSContainer;
+import com.android.systemui.omni.BatteryViewManager;
 import com.android.systemui.qs.QSPanel;
 import com.android.systemui.recents.ScreenPinningRequest;
 import com.android.systemui.recents.events.EventBus;
@@ -428,6 +429,9 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     int mInitialTouchX;
     int mInitialTouchY;
 
+    // omni additions
+    private BatteryViewManager mBatteryViewManager;
+
     // for disabling the status bar
     int mDisabled1 = 0;
     int mDisabled2 = 0;
@@ -1045,7 +1049,6 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         // set the inital view visibility
         setAreThereNotifications();
 
-        createIconController();
 
         // Background thread for any controllers that need it.
         mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
@@ -1068,6 +1071,13 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
                 // noop
             }
         });
+
+        // must be before StatusBarIconController
+        LinearLayout batteryContainer = (LinearLayout) mStatusBarView.findViewById(R.id.battery_container);
+        mBatteryViewManager = new BatteryViewManager(mContext, batteryContainer, mStatusBarView.getBarTransitions(), null);
+
+        createIconController();
+
         mNetworkController = new NetworkControllerImpl(mContext, mHandlerThread.getLooper());
         mNetworkController.setUserSetupComplete(mUserSetup);
         mHotspotController = new HotspotControllerImpl(mContext);
@@ -1141,8 +1151,8 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         mKeyguardStatusBar.setUserSwitcherController(mUserSwitcherController);
         mUserInfoController.reloadUserInfo();
 
-        ((BatteryMeterView) mStatusBarView.findViewById(R.id.battery)).setBatteryController(
-                mBatteryController);
+        mBatteryViewManager.setBatteryController(mBatteryController);
+        mHeader.setBatteryController(mBatteryController);
         mKeyguardStatusBar.setBatteryController(mBatteryController);
         mHeader.setWeatherController(mWeatherController);
 
@@ -3996,6 +4006,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         clearCurrentMediaNotification();
         mLockscreenWallpaper.setCurrentUser(newUserId);
         updateMediaMetaData(true, false);
+        mBatteryViewManager.update();
     }
 
     private void setControllerUsers() {
@@ -5481,4 +5492,8 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
             }
         }
     }
+
+    protected BatteryViewManager getBatteryViewManager() {
+        return mBatteryViewManager;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java
index c4bd3ed..09e41af 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java
@@ -23,6 +23,7 @@ import android.content.res.Resources;
 import android.view.View;
 
 import com.android.systemui.R;
+import com.android.systemui.omni.AbstractBatteryView;
 
 public final class PhoneStatusBarTransitions extends BarTransitions {
     private static final float ICON_ALPHA_WHEN_NOT_OPAQUE = 1;
@@ -32,7 +33,7 @@ public final class PhoneStatusBarTransitions extends BarTransitions {
     private final PhoneStatusBarView mView;
     private final float mIconAlphaWhenOpaque;
 
-    private View mCosmicLogoLeft, mLeftSide, mStatusIcons, mSignalCluster, mBattery, mClock, mCenterClock, mNetworkTraffic, mCosmicLogo;
+    private View mCosmicLogoLeft, mLeftSide, mStatusIcons, mSignalCluster, mClock, mCenterClock, mNetworkTraffic, mCosmicLogo;
     private Animator mCurrentAnimation;
 
     public PhoneStatusBarTransitions(PhoneStatusBarView view) {
@@ -47,7 +48,7 @@ public final class PhoneStatusBarTransitions extends BarTransitions {
         mLeftSide = mView.findViewById(R.id.notification_icon_area);
         mStatusIcons = mView.findViewById(R.id.statusIcons);
         mSignalCluster = mView.findViewById(R.id.signal_cluster);
-        mBattery = mView.findViewById(R.id.battery);
+        //mBattery = mView.findViewById(R.id.battery);
         mClock = mView.findViewById(R.id.clock);
         mCenterClock = mView.findViewById(R.id.center_clock);
         mNetworkTraffic = mView.findViewById(R.id.networkTraffic);
@@ -97,7 +98,7 @@ public final class PhoneStatusBarTransitions extends BarTransitions {
                     animateTransitionTo(mStatusIcons, newAlpha),
                     animateTransitionTo(mSignalCluster, newAlpha),
                     animateTransitionTo(mNetworkTraffic, newAlpha),
-                    animateTransitionTo(mBattery, newAlphaBC),
+                    //animateTransitionTo(mBattery, newAlphaBC),
                     animateTransitionTo(mClock, newAlphaBC),
                     animateTransitionTo(mCosmicLogo, newAlphaBC),
                     animateTransitionTo(mCenterClock, newAlphaBC)
@@ -113,7 +114,7 @@ public final class PhoneStatusBarTransitions extends BarTransitions {
             mStatusIcons.setAlpha(newAlpha);
             mSignalCluster.setAlpha(newAlpha);
             mNetworkTraffic.setAlpha(newAlpha);
-            mBattery.setAlpha(newAlphaBC);
+            //mBattery.setAlpha(newAlphaBC);
             mClock.setAlpha(newAlphaBC);
             mCosmicLogo.setAlpha(newAlphaBC);
             mCenterClock.setAlpha(newAlphaBC);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java
index 3c45372..90aba7a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarHeaderView.java
@@ -47,6 +47,8 @@ import com.android.keyguard.KeyguardStatusView;
 import com.android.systemui.BatteryMeterView;
 import com.android.systemui.FontSizeUtils;
 import com.android.systemui.R;
+import com.android.systemui.omni.AbstractBatteryView;
+import com.android.systemui.omni.BatteryViewManager;
 import com.android.systemui.qs.QSPanel;
 import com.android.systemui.qs.QSPanel.Callback;
 import com.android.systemui.qs.QSTile;
@@ -66,7 +68,7 @@ import com.android.internal.util.cosmic.WeatherControllerImpl;
  */
 public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnClickListener,
         BatteryController.BatteryStateChangeCallback, NextAlarmController.NextAlarmChangeCallback,
-        EmergencyListener, WeatherController.Callback {
+        EmergencyListener, BatteryViewManager.BatteryViewManagerObserver, WeatherController.Callback {
 
     private boolean mExpanded;
     private boolean mListening;
@@ -89,7 +91,6 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
     private Switch mQsDetailHeaderSwitch;
     private ImageView mQsDetailHeaderProgress;
     private TextView mEmergencyCallsOnly;
-    private TextView mBatteryLevel;
     private TextView mAlarmStatus;
 
     private boolean mShowEmergencyCallsOnly;
@@ -134,6 +135,7 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
     private float mCurrentT;
     private boolean mShowingDetail;
     private boolean mDetailTransitioning;
+    private BatteryViewManager mBatteryViewManager;
 
     private boolean mAllowExpand = true;
 
@@ -165,7 +167,6 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
         mQsDetailHeaderSwitch = (Switch) mQsDetailHeader.findViewById(android.R.id.toggle);
         mQsDetailHeaderProgress = (ImageView) findViewById(R.id.qs_detail_header_progress);
         mEmergencyCallsOnly = (TextView) findViewById(R.id.header_emergency_calls_only);
-        mBatteryLevel = (TextView) findViewById(R.id.battery_level);
         mAlarmStatus = (TextView) findViewById(R.id.alarm_status);
         mAlarmStatus.setOnClickListener(this);
         mSignalCluster = findViewById(R.id.signal_cluster);
@@ -201,6 +202,9 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
         ((RippleDrawable) getBackground()).setForceSoftware(true);
         ((RippleDrawable) mSettingsButton.getBackground()).setForceSoftware(true);
         ((RippleDrawable) mSystemIconsSuperContainer.getBackground()).setForceSoftware(true);
+
+        LinearLayout batteryContainer = (LinearLayout) findViewById(R.id.battery_container);
+        mBatteryViewManager = new BatteryViewManager(mContext, batteryContainer, null, this);
     }
 
     @Override
@@ -221,7 +225,7 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
     @Override
     protected void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-        FontSizeUtils.updateFontSize(mBatteryLevel, R.dimen.battery_level_text_size);
+        ////FontSizeUtils.updateFontSize(mBatteryLevel, R.dimen.battery_level_text_size);
         FontSizeUtils.updateFontSize(mEmergencyCallsOnly,
                 R.dimen.qs_emergency_calls_only_text_size);
         FontSizeUtils.updateFontSize(mDateCollapsed, R.dimen.qs_date_collapsed_size);
@@ -288,7 +292,7 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
 
     public void setBatteryController(BatteryController batteryController) {
         mBatteryController = batteryController;
-        ((BatteryMeterView) findViewById(R.id.battery)).setBatteryController(batteryController);
+        mBatteryViewManager.setBatteryController(mBatteryController);
     }
 
     public void setNextAlarmController(NextAlarmController nextAlarmController) {
@@ -337,6 +341,7 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
         updateAvatarScale();
         updateClockLp();
         requestCaptureValues();
+        mBatteryViewManager.update();
     }
 
     private void updateHeights() {
@@ -358,7 +363,7 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
             updateSignalClusterDetachment();
         }
         mEmergencyCallsOnly.setVisibility(mExpanded && mShowEmergencyCallsOnly ? VISIBLE : GONE);
-        mBatteryLevel.setVisibility(mExpanded ? View.VISIBLE : View.GONE);
+        //mBatteryLevel.setVisibility(mExpanded ? View.VISIBLE : View.GONE);
     }
 
     private void updateSignalClusterDetachment() {
@@ -428,7 +433,7 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
     @Override
     public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
         String percentage = NumberFormat.getPercentInstance().format((double) level / 100.0);
-        mBatteryLevel.setText(percentage);
+        //mBatteryLevel.setText(percentage);
     }
 
     @Override
@@ -622,8 +627,8 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
                     + mSystemIconsContainer.getLeft();
         }
         target.batteryY = mSystemIconsSuperContainer.getTop() + mSystemIconsContainer.getTop();
-        target.batteryLevelAlpha = getAlphaForVisibility(mBatteryLevel);
         target.settingsAlpha = getAlphaForVisibility(mSettingsButton);
+        //target.batteryLevelAlpha = getAlphaForVisibility(mBatteryLevel);
         target.settingsTranslation = mExpanded
                 ? 0
                 : mMultiUserSwitch.getLeft() - mSettingsButton.getLeft();
@@ -688,8 +693,8 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
         }
         applyAlpha(mDateCollapsed, values.dateCollapsedAlpha);
         applyAlpha(mDateExpanded, values.dateExpandedAlpha);
-        applyAlpha(mBatteryLevel, values.batteryLevelAlpha);
         applyAlpha(mSettingsButton, values.settingsAlpha);
+        //applyAlpha(mBatteryLevel, values.batteryLevelAlpha);
         applyAlpha(mSignalCluster, values.signalClusterAlpha);
         if (!mExpanded) {
             mTime.setScaleX(1f);
@@ -856,4 +861,13 @@ public class StatusBarHeaderView extends BaseStatusBarHeader implements View.OnC
                     .start();
         }
     };
+
+    @Override
+    public void batteryStyleChanged(AbstractBatteryView batteryStyle) {
+    }
+
+    @Override
+    public boolean isExpandedBatteryView() {
+        return true;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java
index 5d6a6fe..f14bd5a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java
@@ -47,6 +47,8 @@ import com.android.systemui.FontSizeUtils;
 import com.android.systemui.Interpolators;
 import com.android.systemui.R;
 import com.android.systemui.SystemUIFactory;
+import com.android.systemui.omni.AbstractBatteryView;
+import com.android.systemui.omni.BatteryViewManager;
 import com.android.systemui.statusbar.NotificationData;
 import com.android.systemui.statusbar.SignalClusterView;
 import com.android.systemui.statusbar.StatusBarIconView;
@@ -88,8 +90,6 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
     private NotificationIconAreaController mNotificationIconAreaController;
     private View mNotificationIconAreaInner;
 
-    private BatteryMeterView mBatteryMeterView;
-    private BatteryMeterView mBatteryMeterViewKeyguard;
     private Clock mClock;
     private Clock mCenterClock;
     private Clock mLeftClock;
@@ -107,6 +107,11 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
     private boolean mShowLogo = false;
     private boolean mShowKeyguardLogo = false;
 
+    //private BatteryMeterView mBatteryMeterView;
+    //private BatteryMeterView mBatteryMeterViewKeyguard;
+    private BatteryViewManager mBatteryViewManager;
+    private AbstractBatteryView mCurrentBatteryView;
+
     private int mIconSize;
     private int mIconHPadding;
 
@@ -167,10 +172,11 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
 
         mStatusIconsKeyguard = (LinearLayout) keyguardStatusBar.findViewById(R.id.statusIcons);
 
-        mBatteryMeterView = (BatteryMeterView) statusBar.findViewById(R.id.battery);
-        mBatteryMeterViewKeyguard = (BatteryMeterView) keyguardStatusBar.findViewById(R.id.battery);
-        scaleBatteryMeterViews(context);
         mLogoColor = StatusBarColorHelper.getLogoColor(mContext);
+        //mBatteryMeterViewKeyguard = (BatteryMeterView) keyguardStatusBar.findViewById(R.id.battery);
+        //mBatteryMeterView = (BatteryMeterView) statusBar.findViewById(R.id.battery);
+        mBatteryViewManager = phoneStatusBar.getBatteryViewManager();
+        //scaleBatteryMeterViews(context);
 
         mClock = (Clock) statusBar.findViewById(R.id.clock);
         mCenterClockLayout = (LinearLayout)statusBar.findViewById(R.id.center_clock_layout);
@@ -212,8 +218,9 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
                 (int) (batteryWidth * iconScaleFactor), (int) (batteryHeight * iconScaleFactor));
         scaledLayoutParams.setMarginsRelative(0, 0, 0, marginBottom);
 
-        mBatteryMeterView.setLayoutParams(scaledLayoutParams);
-        mBatteryMeterViewKeyguard.setLayoutParams(scaledLayoutParams);
+        //mBatteryMeterView.setLayoutParams(scaledLayoutParams);
+        //mBatteryMeterViewKeyguard.setLayoutParams(scaledLayoutParams);
+        //mBatteryViewManager.setLayoutParams(scaledLayoutParams);
     }
 
     @Override
@@ -652,8 +659,6 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
             v.setImageTintList(ColorStateList.valueOf(getTint(mTintArea, v, mIconTint)));
         }
         mSignalCluster.setIconTint(mIconTint, mDarkIntensity, mTintArea);
-        mBatteryMeterView.setDarkIntensity(
-                isInArea(mTintArea, mBatteryMeterView) ? mDarkIntensity : 0);
         mClock.setTextColor(getTint(mTintArea, mClock, mIconTint));
         mCenterClock.setTextColor(getTint(mTintArea, mCenterClock, mIconTint));
         mLeftClock.setTextColor(getTint(mTintArea, mLeftClock, mIconTint));
@@ -664,6 +669,8 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
         if (mShowLogo && mLogoStyle == LOGO_RIGHT) {
             mCosmicLogo.setImageTintList(ColorStateList.valueOf(getLogoTint(mTintArea, mCosmicLogo, mLogoColor)));
         }
+        mBatteryViewManager.setDarkIntensity(
+                isInArea(mTintArea, mCurrentBatteryView) ? mDarkIntensity : 0);
         mCarrierLabel.setTextColor(getTint(mTintArea, mCarrierLabel, mIconTint));
     }
 
@@ -731,7 +738,8 @@ public class StatusBarIconController extends StatusBarIconList implements Tunabl
                     ViewGroup.LayoutParams.WRAP_CONTENT, mIconSize);
             child.setLayoutParams(lp);
         }
-        scaleBatteryMeterViews(mContext);
+        mBatteryViewManager.onDensityOrFontScaleChanged();
+        //scaleBatteryMeterViews(mContext);
     }
 
     private void updateCarrier() {
-- 
2.1.4

