From 8e3430662650391d54e78e350e7efb77de41a8d1 Mon Sep 17 00:00:00 2001
From: Jacob McSwain <jacob.a.mcswain@gmail.com>
Date: Sun, 26 Jun 2016 15:21:52 -0500
Subject: [PATCH 3/6] OMS-N: Implement multiple targets for enable/disable and
 disable-all

Just use the enable option like normal, but you can add more arguments
for more packages. Also add a feature that allows the client to disable
all of the current user's overlays.

Multiple targets example:
    om enable android.AkZent com.android.systemui.AkZent

Works the same as:
    om enable android.AkZent && om enable com.android.systemui.AkZent

Original implementation for M by @USA-RedDragon
Current and further development by @nicholaschum

Change-Id: I434ec5fed593c21ac5dff70a5461176b3df65c7c
Signed-off-by: sub77 <sub77@ymail.com>

Conflicts:
	services/core/java/com/android/server/om/OverlayManagerService.java
	services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
	services/core/java/com/android/server/om/OverlayManagerSettings.java
	services/core/java/com/android/server/om/OverlayManagerShellCommand.java

Signed-off-by: sub77 <sub77@ymail.com>
---
 core/java/android/content/om/IOverlayManager.aidl  |   9 +-
 .../android/server/om/OverlayManagerService.java   |  80 ++++--
 .../server/om/OverlayManagerServiceImpl.java       |  18 +-
 .../android/server/om/OverlayManagerSettings.java  |  42 ++--
 .../server/om/OverlayManagerShellCommand.java      | 269 +++++++++++++++++++++
 5 files changed, 375 insertions(+), 43 deletions(-)
 create mode 100644 services/core/java/com/android/server/om/OverlayManagerShellCommand.java

diff --git a/core/java/android/content/om/IOverlayManager.aidl b/core/java/android/content/om/IOverlayManager.aidl
index aba9573..74d50fd 100644
--- a/core/java/android/content/om/IOverlayManager.aidl
+++ b/core/java/android/content/om/IOverlayManager.aidl
@@ -82,10 +82,11 @@ interface IOverlayManager {
      * @param packageName The name of the overlay package.
      * @param enable true to enable the overlay, false to disable it.
      * @param userId The user for which to change the overlay.
+     * @param shouldWait true to wait to reload resources until refresh is called
      * @return true if the system successfully registered the request, false
      *         otherwise.
      */
-    boolean setEnabled(in String packageName, in boolean enable, in int userId);
+    boolean setEnabled(in String packageName, in boolean enable, in int userId, in boolean shouldWait);
 
     /**
      * Change the priority of the given overlay to be just higher than the
@@ -125,4 +126,10 @@ interface IOverlayManager {
      * @param userId The user for which to change the overlay.
      */
     boolean setLowestPriority(in String packageName, in int userId);
+
+    /**
+     * Refresh assets
+     * @param uid the user to refresh assets for
+     */
+    void refresh(in int uid);
 }
diff --git a/services/core/java/com/android/server/om/OverlayManagerService.java b/services/core/java/com/android/server/om/OverlayManagerService.java
index aa5b0f6..9f86d48 100644
--- a/services/core/java/com/android/server/om/OverlayManagerService.java
+++ b/services/core/java/com/android/server/om/OverlayManagerService.java
@@ -261,7 +261,7 @@ public class OverlayManagerService extends SystemService {
         synchronized (mLock) {
             targets = mImpl.onSwitchUser(newUserId);
         }
-        updateAssets(newUserId, targets.toArray(new String[targets.size()]));
+        updateSelectedAssets(newUserId, targets);
     }
 
     public List<String[]> getAllAssetPaths(String packageName, int userId)
@@ -457,8 +457,8 @@ public class OverlayManagerService extends SystemService {
         }
 
         @Override
-        public boolean setEnabled(String packageName, boolean enable, int userId)
-                throws RemoteException {
+        public boolean setEnabled(@Nullable final String packageName, final boolean enable,
+                int userId, final boolean shouldWait) throws RemoteException {
             enforceChangeConfigurationPermission("setEnabled");
             userId = handleIncomingUser(userId, "setEnabled");
             if (packageName == null) {
@@ -468,7 +468,7 @@ public class OverlayManagerService extends SystemService {
             final long ident = Binder.clearCallingIdentity();
             try {
                 synchronized (mLock) {
-                    return mImpl.onSetEnabled(packageName, enable, userId);
+                    return mImpl.onSetEnabled(packageName, enable, userId, shouldWait);
                 }
             } finally {
                 Binder.restoreCallingIdentity(ident);
@@ -586,6 +586,15 @@ public class OverlayManagerService extends SystemService {
                         message);
             }
         }
+
+        public void refresh(int uid) {
+            Collection<String> targets;
+            synchronized (mLock) {
+                targets = mImpl.onSwitchUser(uid);
+            }
+            List targeted = new ArrayList(targets);
+            updateSelectedAssets(uid, targeted);
+        }
     };
 
     private boolean isOverlayPackage(@NonNull PackageInfo pi) {
@@ -599,43 +608,48 @@ public class OverlayManagerService extends SystemService {
         }
 
         @Override
-        public void onOverlayAdded(@NonNull OverlayInfo oi) {
-            scheduleBroadcast(Intent.ACTION_OVERLAY_ADDED, oi, oi.isEnabled());
+        public void onOverlayAdded(@NonNull final OverlayInfo oi, final boolean shouldWait) {
+            scheduleBroadcast(Intent.ACTION_OVERLAY_ADDED, oi, oi.isEnabled(), shouldWait);
         }
 
         @Override
-        public void onOverlayRemoved(@NonNull OverlayInfo oi) {
-            scheduleBroadcast(Intent.ACTION_OVERLAY_REMOVED, oi, oi.isEnabled());
+        public void onOverlayRemoved(@NonNull final OverlayInfo oi, final boolean shouldWait) {
+            scheduleBroadcast(Intent.ACTION_OVERLAY_REMOVED, oi, oi.isEnabled(), shouldWait);
         }
 
         @Override
-        public void onOverlayChanged(@NonNull OverlayInfo oi, @NonNull OverlayInfo oldOi) {
-            scheduleBroadcast(Intent.ACTION_OVERLAY_CHANGED, oi, oi.isEnabled() != oldOi.isEnabled());
+        public void onOverlayChanged(@NonNull final OverlayInfo oi, @NonNull OverlayInfo oldOi,
+                final boolean shouldWait) {
+            scheduleBroadcast(Intent.ACTION_OVERLAY_CHANGED, oi,
+                    oi.isEnabled() != oldOi.isEnabled(), shouldWait);
         }
 
         @Override
-        public void onOverlayPriorityChanged(@NonNull OverlayInfo oi) {
-            scheduleBroadcast(Intent.ACTION_OVERLAY_PRIORITY_CHANGED, oi, oi.isEnabled());
+        public void onOverlayPriorityChanged(@NonNull final OverlayInfo oi) {
+            scheduleBroadcast(Intent.ACTION_OVERLAY_PRIORITY_CHANGED, oi, oi.isEnabled(), false);
         }
 
-        private void scheduleBroadcast(@NonNull String action, @NonNull OverlayInfo oi,
-                boolean doUpdate) {
-            FgThread.getHandler().post(new BroadcastRunnable(action, oi, doUpdate));
+        private void scheduleBroadcast(@NonNull final String action, @NonNull final OverlayInfo oi,
+                final boolean doUpdate, final boolean shouldWait) {
+            FgThread.getHandler().post(new BroadcastRunnable(action, oi, doUpdate, shouldWait));
         }
 
         private class BroadcastRunnable extends Thread {
             private final String mAction;
             private final OverlayInfo mOverlayInfo;
             private final boolean mDoUpdate;
+            private final boolean shouldWait;
 
-            public BroadcastRunnable(String action, OverlayInfo oi, boolean doUpdate) {
+            public BroadcastRunnable(@NonNull final String action, @NonNull final OverlayInfo oi, 
+                    final boolean doUpdate, final boolean shouldWait) {
                 mAction = action;
                 mOverlayInfo = oi;
                 mDoUpdate = doUpdate;
+                this.shouldWait = shouldWait;
             }
 
             public void run() {
-                if (mDoUpdate) {
+                if (mDoUpdate && !shouldWait) {
                     updateAssets(mOverlayInfo.userId, mOverlayInfo.targetPackageName);
                 }
                 sendBroadcast(mAction, mOverlayInfo.packageName, mOverlayInfo.userId);
@@ -659,7 +673,37 @@ public class OverlayManagerService extends SystemService {
         }
     }
 
-    private void updateAssets(int userId, String... targetPackageNames) {
+    private void updateAssets(final int userId, final String targetPackageName) {
+        final List<String> list = new ArrayList<>();
+        list.add(targetPackageName);
+        updateSelectedAssets(userId, list);
+    }
+
+    private void updateSelectedAssets(final int userId, List<String> targetPackageNames) {
+        final PackageManagerInternal pm = LocalServices.getService(PackageManagerInternal.class);
+        final boolean updateFrameworkRes = targetPackageNames.contains("android");
+        if (updateFrameworkRes) {
+            targetPackageNames = pm.getTargetPackageNames(userId);
+        }
+
+        final Map<String, String[]> allPaths = new ArrayMap<>(targetPackageNames.size());
+        synchronized (mLock) {
+            final List<String> frameworkPaths = mImpl.onGetEnabledOverlayPaths("android", userId);
+            for (final String packageName : targetPackageNames) {
+                final List<String> paths = new ArrayList<>();
+                paths.addAll(frameworkPaths);
+                if (!"android".equals(packageName)) {
+                    paths.addAll(mImpl.onGetEnabledOverlayPaths(packageName, userId));
+                }
+                allPaths.put(packageName,
+                    paths.isEmpty() ? null : paths.toArray(new String[paths.size()]));
+            }
+        }
+
+        for (String packageName : targetPackageNames) {
+            pm.setResourceDirs(userId, packageName, allPaths.get(packageName));
+        }
+
         final IActivityManager am = ActivityManagerNative.getDefault();
         try {
             Map<String, String[]> assetPaths = new ArrayMap<>();
diff --git a/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java b/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
index e0e7e3a..28585dc 100644
--- a/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
+++ b/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
@@ -312,7 +312,8 @@ class OverlayManagerServiceImpl {
         return mSettings.getOverlaysForUser(userId);
     }
 
-    boolean onSetEnabled(@NonNull String packageName, boolean enable, int userId) {
+    boolean onSetEnabled(@NonNull final String packageName, final boolean enable,
+            final int userId, final boolean shouldWait) {
         if (DEBUG) {
             Slog.d(TAG, String.format("onSetEnabled packageName=%s enable=%s userId=%d",
                         packageName, enable, userId));
@@ -327,7 +328,7 @@ class OverlayManagerServiceImpl {
             OverlayInfo oi = mSettings.getOverlayInfo(packageName, userId);
             PackageInfo targetPackage = mPackageManager.getPackageInfo(oi.targetPackageName, userId);
             mSettings.setEnabled(packageName, userId, enable);
-            updateState(targetPackage, overlayPackage, userId);
+            updateState(targetPackage, overlayPackage, userId, shouldWait);
             return true;
         } catch (OverlayManagerSettings.BadKeyException e) {
             return false;
@@ -367,8 +368,15 @@ class OverlayManagerServiceImpl {
         return paths.toArray(new String[0]);
     }
 
-    private void updateState(PackageInfo targetPackage, @NonNull PackageInfo overlayPackage,
-            int userId) throws OverlayManagerSettings.BadKeyException {
+    private void updateState(@Nullable final PackageInfo targetPackage,
+            @NonNull final PackageInfo overlayPackage, final int userId)
+        throws OverlayManagerSettings.BadKeyException {
+        updateState(targetPackage, overlayPackage, userId, false);
+    }
+
+    private void updateState(@Nullable final PackageInfo targetPackage,
+            @NonNull final PackageInfo overlayPackage, final int userId,
+            final boolean shouldWait) throws OverlayManagerSettings.BadKeyException {
         if (targetPackage != null) {
             mIdmapManager.createIdmap(targetPackage, overlayPackage, userId);
         }
@@ -385,7 +393,7 @@ class OverlayManagerServiceImpl {
                             OverlayInfo.stateToString(currentState),
                             OverlayInfo.stateToString(newState)));
             }
-            mSettings.setState(overlayPackage.packageName, userId, newState);
+            mSettings.setState(overlayPackage.packageName, userId, newState, shouldWait);
         }
     }
 
diff --git a/services/core/java/com/android/server/om/OverlayManagerSettings.java b/services/core/java/com/android/server/om/OverlayManagerSettings.java
index dd5d52e..489b20d 100644
--- a/services/core/java/com/android/server/om/OverlayManagerSettings.java
+++ b/services/core/java/com/android/server/om/OverlayManagerSettings.java
@@ -66,7 +66,7 @@ class OverlayManagerSettings {
         OverlayInfo oi = item.getOverlayInfo();
         mItems.remove(item);
         if (oi != null) {
-            notifyOverlayRemoved(oi);
+            notifyOverlayRemoved(oi, false);
         }
     }
 
@@ -120,8 +120,7 @@ class OverlayManagerSettings {
             OverlayInfo oi = item.getOverlayInfo();
             item.setUpgrading(true);
             item.setState(STATE_NOT_APPROVED_UNKNOWN);
-            notifyOverlayRemoved(oi);
-            notifySettingsChanged();
+            notifyOverlayRemoved(oi, false);
         } else {
             item.setUpgrading(false);
             notifySettingsChanged();
@@ -157,8 +156,10 @@ class OverlayManagerSettings {
         return item.getState();
     }
 
-    void setState(@NonNull String packageName, int userId, int state) throws BadKeyException {
-        SettingsItem item = select(packageName, userId);
+    void setState(@NonNull final String packageName, final int userId, final int state,
+            final boolean shouldWait) throws BadKeyException {
+        final SettingsItem item = select(packageName, userId);
+>>>>>>> 0767af6... OMS-N: Implement multiple targets for enable/disable and disable-all
         if (item == null) {
             throw new BadKeyException(packageName, userId);
         }
@@ -166,10 +167,10 @@ class OverlayManagerSettings {
         item.setState(state);
         OverlayInfo current = item.getOverlayInfo();
         if (previous.state == STATE_NOT_APPROVED_UNKNOWN) {
-            notifyOverlayAdded(current);
+            notifyOverlayAdded(current, shouldWait);
             notifySettingsChanged();
         } else if (current.state != previous.state) {
-            notifyOverlayChanged(current, previous);
+            notifyOverlayChanged(current, previous, shouldWait);
             notifySettingsChanged();
         }
     }
@@ -584,31 +585,33 @@ class OverlayManagerSettings {
         }
     }
 
-    private void notifyOverlayAdded(final OverlayInfo oi) {
+    private void notifyOverlayAdded(@NonNull final OverlayInfo oi, final boolean shouldWait) {
         if (DEBUG) {
             assertNotNull(oi);
         }
-        for (ChangeListener listener : mListeners) {
-            listener.onOverlayAdded(oi);
+        for (final ChangeListener listener : mListeners) {
+            listener.onOverlayAdded(oi, shouldWait);
         }
     }
 
-    private void notifyOverlayRemoved(final OverlayInfo oi) {
+    private void notifyOverlayRemoved(@NonNull final OverlayInfo oi, final boolean shouldWait) {
         if (DEBUG) {
             assertNotNull(oi);
         }
-        for (ChangeListener listener : mListeners) {
-            listener.onOverlayRemoved(oi);
+        for (final ChangeListener listener : mListeners) {
+            listener.onOverlayRemoved(oi, shouldWait);
         }
     }
 
-    private void notifyOverlayChanged(final OverlayInfo oi, final OverlayInfo oldOi) {
+    private void notifyOverlayChanged(@NonNull final OverlayInfo oi,
+            @NonNull final OverlayInfo oldOi, final boolean shouldWait) {
         if (DEBUG) {
             assertNotNull(oi);
             assertNotNull(oldOi);
         }
-        for (ChangeListener listener : mListeners) {
-            listener.onOverlayChanged(oi, oldOi);
+
+        for (final ChangeListener listener : mListeners) {
+            listener.onOverlayChanged(oi, oldOi, shouldWait);
         }
     }
 
@@ -623,9 +626,10 @@ class OverlayManagerSettings {
 
     interface ChangeListener {
         void onSettingsChanged();
-        void onOverlayAdded(@NonNull OverlayInfo oi);
-        void onOverlayRemoved(@NonNull OverlayInfo oi);
-        void onOverlayChanged(@NonNull OverlayInfo oi, @NonNull OverlayInfo oldOi);
+        void onOverlayAdded(@NonNull OverlayInfo oi, boolean shouldWait);
+        void onOverlayRemoved(@NonNull OverlayInfo oi, boolean shouldWait);
+        void onOverlayChanged(@NonNull OverlayInfo oi, @NonNull OverlayInfo oldOi,
+            boolean shouldWait);
         void onOverlayPriorityChanged(@NonNull OverlayInfo oi);
     }
 
diff --git a/services/core/java/com/android/server/om/OverlayManagerShellCommand.java b/services/core/java/com/android/server/om/OverlayManagerShellCommand.java
new file mode 100644
index 0000000..44004c1
--- /dev/null
+++ b/services/core/java/com/android/server/om/OverlayManagerShellCommand.java
@@ -0,0 +1,269 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.om;
+
+import android.annotation.NonNull;
+import android.annotation.Nullable;
+import android.content.om.IOverlayManager;
+import android.content.om.OverlayInfo;
+import android.os.RemoteException;
+import android.os.ShellCommand;
+import android.os.UserHandle;
+
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+/**
+ * Implementation of 'cmd overlay' commands.
+ *
+ * This class provides an interface to the OverlayManagerService via adb.
+ * Intended only for manual debugging. Execute 'adb exec-out cmd overlay help'
+ * for a list of available commands.
+ */
+final class OverlayManagerShellCommand extends ShellCommand {
+    private final IOverlayManager mInterface;
+
+    OverlayManagerShellCommand(@NonNull final IOverlayManager iom) {
+        mInterface = iom;
+    }
+
+    @Override
+    public int onCommand(@Nullable final String cmd) {
+        if (cmd == null) {
+            final PrintWriter out = getOutPrintWriter();
+            out.println("The overlay manager has already been initialized.");
+            return -1;
+        }
+        final PrintWriter err = getErrPrintWriter();
+        try {
+            switch (cmd) {
+                case "list":
+                    return runList();
+                case "enable":
+                    return runEnableDisable(true);
+                case "disable":
+                    return runEnableDisable(false);
+                case "disable-all":
+                	return runDisableAll();
+                case "set-priority":
+                    return runSetPriority();
+                default:
+                    return handleDefaultCommands(cmd);
+            }
+        } catch (IllegalArgumentException e) {
+            err.println("Error: " + e.getMessage());
+        } catch (RemoteException e) {
+            err.println("Remote exception: " + e);
+        }
+        return -1;
+    }
+
+    @Override
+    public void onHelp() {
+        final PrintWriter out = getOutPrintWriter();
+        out.println("Overlay manager (overlay) commands:");
+        out.println("  help");
+        out.println("    Print this help text.");
+        out.println("  dump [--verbose] [--user USER_ID] [PACKAGE [PACKAGE [...]]]");
+        out.println("    Print debugging information about the overlay manager.");
+        out.println("  list [--user USER_ID] [PACKAGE [PACKAGE [...]]]");
+        out.println("    Print information about target and overlay packages.");
+        out.println("    Overlay packages are printed in priority order. With optional");
+        out.println("    parameters PACKAGEs, limit output to the specified packages");
+        out.println("    but include more information about each package.");
+        out.println("  enable [--user USER_ID] [PACKAGE [PACKAGE [...]]]");
+        out.println("    Enable overlay package PACKAGE or subsequent counts of PACKAGE.");
+        out.println("  disable [--user USER_ID] [PACKAGE [PACKAGE [...]]]");
+        out.println("    Disable overlay package PACKAGE or subsequent counts of PACKAGE.");
+        out.println("  disable-all [--user USER_ID]");
+        out.println("    Disable all overlay packages.");
+        out.println("  set-priority [--user USER_ID] PACKAGE PARENT|lowest|highest");
+        out.println("    Change the priority of the overlay PACKAGE to be just higher than");
+        out.println("    the priority of PACKAGE_PARENT If PARENT is the special keyword");
+        out.println("    'lowest', change priority of PACKAGE to the lowest priority.");
+        out.println("    If PARENT is the special keyword 'highest', change priority of");
+        out.println("    PACKAGE to the highest priority.");
+    }
+
+    private int runList() throws RemoteException {
+        final PrintWriter out = getOutPrintWriter();
+        final PrintWriter err = getErrPrintWriter();
+
+        int userId = UserHandle.USER_SYSTEM;
+        String opt;
+        while ((opt = getNextOption()) != null) {
+            switch (opt) {
+                case "--user":
+                    userId = UserHandle.parseUserArg(getNextArgRequired());
+                    break;
+                default:
+                    err.println("Error: Unknown option: " + opt);
+                    return 1;
+            }
+        }
+
+        final Map<String, List<OverlayInfo>> allOverlays = mInterface.getAllOverlays(userId);
+        for (final String targetPackageName : allOverlays.keySet()) {
+            out.println(targetPackageName);
+            for (final OverlayInfo oi : allOverlays.get(targetPackageName)) {
+                String status = "---";
+                if (oi.isApproved()) {
+                    status = "[ ]";
+                }
+                if (oi.isEnabled()) {
+                    status = "[x]";
+                }
+                out.println(String.format("%s %s", status, oi.packageName));
+            }
+            out.println();
+        }
+        return 0;
+    }
+
+    private int runEnableDisable(final boolean enable) throws RemoteException {
+        final PrintWriter err = getErrPrintWriter();
+
+        int userId = UserHandle.USER_SYSTEM;
+        String opt;
+        while ((opt = getNextOption()) != null) {
+            switch (opt) {
+                case "--user":
+                    userId = UserHandle.parseUserArg(getNextArgRequired());
+                    break;
+                default:
+                    err.println("Error: Unknown option: " + opt);
+                    return 1;
+            }
+        }
+
+        int argc = 0;
+        String packageName = getNextArgRequired();
+        ArrayList<String> packages = new ArrayList<>();
+        if (packageName == null) {
+            System.err.println("Error: no packages specified");
+            return 1;
+        }
+        while (packageName != null) {
+            argc++;
+            packages.add(packageName);
+            packageName = getNextArg();
+        }
+        if (argc > 1) {
+            for (String pkg : packages) {
+                boolean ret = mInterface.setEnabled(pkg, enable, userId, false);
+                if (!ret) {
+                    System.err.println("Error: Failed to " + ((enable) ? "enable ": "disable ") + pkg);
+                }
+            }
+            return 0;
+        } else if (argc == 1) {
+            return mInterface.setEnabled(packages.get(0), enable, userId, false) ? 0 : 1;
+        } else {
+            System.err.println("Error: A fatal exception has occurred.");
+            return 1;
+        }
+    }
+
+    private int runDisableAll() {
+        int userId = UserHandle.USER_OWNER;
+        String opt;
+        while ((opt = getNextOption()) != null) {
+            switch (opt) {
+                case "--user":
+                    userId = UserHandle.parseUserArg(getNextArgRequired());
+                	break;
+                default:
+                    System.err.println("Error: Unknown option: " + opt);
+                    return 1;
+            }
+        }
+
+        try {
+            Map<String, List<OverlayInfo>> targetsAndOverlays = mInterface.getAllOverlays(userId);
+            int iterator = 0;
+            int overlaySize = targetsAndOverlays.entrySet().size();
+            for (Entry<String, List<OverlayInfo>> targetEntry : targetsAndOverlays.entrySet()) {
+                int iterator_nested = 0;
+                int targetSize_nested = targetEntry.getValue().size();
+                iterator++;
+                for (OverlayInfo oi : targetEntry.getValue()) {
+                    if (iterator_nested < targetSize_nested) {
+                        if (oi.isEnabled()) {
+                            boolean worked = mInterface.setEnabled(oi.packageName, false, userId, true);
+                            if (!worked) {
+                                System.err.println("Failed to disable " + oi.packageName);
+                            }
+                        }
+                    } else {
+                        if (iterator == overlaySize) {
+                            if (oi.isEnabled()) {
+                                boolean worked = mInterface.setEnabled(oi.packageName, false, userId, false);
+                                if (!worked) {
+                                    System.err.println("Failed to disable " + oi.packageName);
+                                }
+                            }
+                        } else {
+                            if (oi.isEnabled()) {
+                                boolean worked = mInterface.setEnabled(oi.packageName, false, userId, true);
+                                if (!worked) {
+                                    System.err.println("Failed to disable " + oi.packageName);
+                                }
+                            }
+                        }
+                    }
+                    iterator_nested++;
+                }
+            }
+            mInterface.refresh(userId);
+        } catch (RemoteException re) {
+            System.err.println(re.toString());
+            System.err.println("Error: A fatal exception has occurred.");
+        }
+        return 0;
+    }
+
+    private int runSetPriority() throws RemoteException {
+        final PrintWriter err = getErrPrintWriter();
+
+        int userId = UserHandle.USER_SYSTEM;
+        String opt;
+        while ((opt = getNextOption()) != null) {
+            switch (opt) {
+                case "--user":
+                    userId = UserHandle.parseUserArg(getNextArgRequired());
+                    break;
+                default:
+                    err.println("Error: Unknown option: " + opt);
+                    return 1;
+            }
+        }
+
+        final String packageName = getNextArgRequired();
+        final String newParentPackageName = getNextArgRequired();
+
+        if ("highest".equals(newParentPackageName)) {
+            return mInterface.setHighestPriority(packageName, userId) ? 0 : 1;
+        } else if ("lowest".equals(newParentPackageName)) {
+            return mInterface.setLowestPriority(packageName, userId) ? 0 : 1;
+        } else {
+            return mInterface.setPriority(packageName, newParentPackageName, userId) ? 0 : 1;
+        }
+    }
+}
-- 
2.1.4

